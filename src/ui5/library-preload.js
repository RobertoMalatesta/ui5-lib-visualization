jQuery.sap.registerPreloadedModules({
	"name": "ui5.libs.library-preload",
	"version": "2.0",
	"modules": {
		"ui5/libs/viz/Chart.js": "/* @flow */\n\n/**\n * UI development toolkit enhancement for HTML5 (OpenUI5)\n * (c) Copyright 2016 PulseShift GmbH, all rights reserved.\n * Created by Jascha Quintern (fuchsvomwalde) on 20. Jul 2016.\n */\nsap.ui.define(['sap/ui/core/Control', 'ui5/viz/ChartAxis', 'ui5/viz/ChartAxisLabel', './library',\n\n// libs\n'sap/ui/thirdparty/d3', 'vendor/c3', 'vendor/lodash'], function (Control, ChartAxis, ChartAxisLabel, library) {\n  /**\n   * Constructor for a new <code>ui5.viz.Chart</code>.\n   *\n   * @param {string} [sId] Id for the new control, generated automatically if no id is given\n   * @param {object} [mSettings] Initial settings for the new control\n   *\n   * @class\n   * The <code>Chart</code> control: Chart container for bar, line and other chart types. Based on C3.js..\n   *\n   * @extends sap.ui.core.Control\n   *\n   * @author PulseShift GmbH\n   * @version 1.0.0\n   * @since: 1.0.0\n   *\n   * @constructor\n   * @public\n   * @alias ui5.viz.Chart\n   */\n  return Control.extend('ui5.viz.Chart', {\n    /* =========================================================== */\n    /* meta data definition                                        */\n    /* =========================================================== */\n\n    metadata: {\n      library: 'ui5.viz',\n      properties: {\n        /* === Appearance === */\n\n        /**\n         * Shows or hides data series and legend\n         * @since: 1.0.0\n         */\n        dataVisible: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: true\n        },\n\n        /**\n         * A CSS size property defining the width of the chart\n         * @since: 1.0.0\n         */\n        width: {\n          type: 'sap.ui.core.CSSSize',\n          group: 'Appearance',\n          defaultValue: '100%'\n        },\n\n        /**\n         * A CSS size property defining the hright of the chart\n         * @since: 1.0.0\n         */\n        height: {\n          type: 'sap.ui.core.CSSSize',\n          group: 'Appearance',\n          defaultValue: '360px'\n        },\n\n        /**\n         * Shows a subchart for naviagtion\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        showSubchart: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: false\n        },\n\n        /**\n         * Enables the chart to be displayed an a small scale\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        microMode: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: false\n        },\n\n        /**\n         * Enables zoom functionality (inactive if subchart is used)\n         * @since: 1.0.0\n         */\n        zoomEnabled: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: false\n        },\n\n        /**\n         * If true, elements outside of the chart area (happend during zooming) is hidden\n         * @since: 1.0.0\n         */\n        clipZoomOverflow: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: true\n        },\n\n        /**\n         * If false, data points on lines or splines are hidden\n         * @since: 1.0.0\n         */\n        showDataPoints: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: true\n        },\n\n        /**\n         * Sets the background color of the chart\n         * @since: 1.0.0\n         */\n        backgroundColor: {\n          type: 'sap.ui.core.CSSColor',\n          group: 'Appearance',\n          defaultValue: 'transparent'\n        },\n\n        /**\n         * Sets the legend position\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        legendPosition: {\n          type: 'ui5.viz.ChartLegendPosition',\n          group: 'Appearance',\n          defaultValue: library.ChartLegendPosition.Right\n        },\n\n        /**\n         * Sets tthe legend visibility\n         * @since: 1.0.0\n         */\n        showLegend: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: false\n        },\n\n        /**\n         * Enables tooltips on chart data elements\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        showTooltip: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: false\n        },\n\n        /**\n         * Sets the tooltip behaviour, whether it should show tooltip for grouped or single data points\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        groupedTooltip: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: false\n        },\n\n        /**\n         * Switches x (by default horizontally) and y (by default vertically) axis\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        switchAxisPosition: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: false\n        },\n\n        /* === Data === */\n\n        /**\n         * Set type of x axis\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        xAxisType: {\n          type: 'ui5.viz.AxisType',\n          group: 'Data',\n          defaultValue: library.AxisType.Default\n        }\n      },\n      aggregations: {\n        /**\n         * Chart axis (if no chart axis is supposed here, a default x axis is generated)\n         * @since: 1.0.0\n         */\n        xAxis: { type: 'ui5.viz.ChartAxis', multiple: false },\n\n        /**\n         * Chart axis (if no chart axis is supposed here, a default y axis is generated)\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        yAxis: { type: 'ui5.viz.ChartAxis', multiple: false },\n\n        /**\n         * Chart axis (if no chart axis is provided, axis is not visible axis is generated)\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        y2Axis: { type: 'ui5.viz.ChartAxis', multiple: false },\n\n        /**\n         * Custom color for series, if not supposed, default theme colors are used\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        colors: { type: 'ps.core.Color', multiple: true },\n\n        /**\n         * Set of lines to be displayed on the chart grid\n         * @since: 1.0.0\n         */\n        lines: { type: 'ui5.viz.ChartLine', multiple: true },\n\n        /**\n         * Set of areas to be displayed on the chart grid\n         * @since: 1.0.0\n         */\n        areas: { type: 'ui5.viz.ChartArea', multiple: true },\n\n        /**\n         * Defines the data series on our chart grid\n         * @since: 1.0.0\n         */\n        series: { type: 'ui5.viz.ChartSeries', multiple: true }\n      },\n      defaultAggregation: 'series',\n      associations: {},\n      events: {\n        /**\n         * Data was updated\n         */\n        chartDataUpdate: {}\n      }\n    },\n\n    /* =========================================================== */\n    /* private attributes                                          */\n    /* =========================================================== */\n\n    /**\n     * Reference to c3 chart instance\n     * @type {object}\n     * @since: 1.0.0\n     */\n    _chart: null,\n\n    /**\n     * Object to prevent update data event\n     * @type {object}\n     * @since: 1.0.0\n     */\n    _haltCount: 0,\n    _initChartUpdateHandler() {\n      const Chart = this;\n      Chart._haltCount = 0;\n    },\n    _getChartUpdateHandler() {\n      const Chart = this;\n      return {\n        halt() {\n          ++Chart._haltCount;\n          if (Chart._haltCount !== 0) {\n            Chart.setBusy(true);\n          }\n        },\n        release() {\n          --Chart._haltCount;\n          if (Chart._haltCount === 0) {\n            Chart.setBusy(false);\n          }\n        },\n        isHalted() {\n          return Chart._haltCount !== 0;\n        }\n      };\n    },\n\n    /**\n     * Number range object to set a unique key to series\n     * @type {object}\n     * @since: 1.0.0\n     */\n    _seriesNumberCount: 0,\n    _initNumberRangeCreator() {\n      const Chart = this;\n      Chart._seriesNumberCount = 0;\n    },\n    _getNumberRangeCreator() {\n      const Chart = this;\n      return {\n        getNext() {\n          return Chart._seriesNumberCount++;\n        }\n      };\n    },\n\n    /**\n     * Lodash debounce update chart method to increase performance.\n     * @private\n     * @type {function}\n     */\n    _debounceUpdate: null,\n\n    /**\n     * Lodash debounce update chart lines only method to increase performance.\n     * @private\n     * @type {function}\n     */\n    _debounceUpdateChartLines: null,\n\n    /**\n     * Lodash debounce update chart areas only method to increase performance.\n     * @private\n     * @type {function}\n     */\n    _debounceUpdateChartAreas: null,\n\n    /* =========================================================== */\n    /* constants                                                   */\n    /* =========================================================== */\n\n    /**\n     * The base CSS class name of control <code>Chart</code>.\n     * @private\n     * @type {string}\n     */\n    CSS_CLASS: 'ui5-viz-chart',\n\n    /**\n     * Disable clip mode when zooming\n     * @private\n     * @type {string}\n     */\n    CSS_CLASS_NOCLIP: 'ui5-viz-chart-noclippath',\n\n    /**\n     * Highlight circle (data point) by pulsating\n     * @private\n     * @type {string}\n     */\n    CSS_HIGHLIGHT_PULSATE: 'ui5-viz-chart-point-highlight-pulsate',\n\n    /**\n     * Default class for lines\n     * @private\n     * @type {string}\n     */\n    CSS_CLASS_LINE: 'ui5-viz-chart-line',\n\n    /**\n     * Class for lines with icon only selector\n     * @private\n     * @type {string}\n     */\n    CSS_CLASS_LINE_SHOWSELECTOR: 'ui5-viz-chart-line-selector-visible',\n\n    /**\n     * Class for lines with icon only selector\n     * @private\n     * @type {string}\n     */\n    CSS_CLASS_LINE_ICONONLY: 'ui5-viz-chart-line-selector-icononly',\n\n    /**\n     * Default class for areas\n     * @private\n     * @type {string}\n     */\n    CSS_CLASS_AREA: 'ui5-viz-chart-area',\n\n    /**\n     * Default class for areas\n     * @private\n     * @type {string}\n     */\n    CSS_CLASS_NO_POINTS: 'ui5-viz-chart-hide-data-points',\n\n    /**\n     * Default class for areas\n     * @private\n     * @type {string}\n     */\n    CSS_CLASS_MICRO_MODE: 'ui5-viz-chart-micro-mode',\n\n    /* =========================================================== */\n    /* lifecycle methods                                           */\n    /* =========================================================== */\n\n    /**\n     * The init() method can be used to set up, for example, internal variables or subcontrols of a composite control.\n     * If the init() method is implemented, SAPUI5 invokes the method for each control instance directly after the constructor method.\n     * @private\n     * @override\n     */\n    init() {\n      // init private attributes\n      this._initNumberRangeCreator();\n      this._initChartUpdateHandler();\n      this._chart = null;\n\n      // don't process update routine during initialization phase of control\n      this._getChartUpdateHandler().halt();\n\n      // init debounce update function instance\n      this._debounceUpdate = _.debounce(this._onDataUpdate, 10);\n      this._debounceUpdateChartLines = _.debounce(this._updateChartLines, 50);\n      this._debounceUpdateChartAreas = _.debounce(this._updateChartAreas, 50);\n    },\n\n    /**\n     * Constructor for a new <code>ui5.viz.Chart</code>.\n     *\n     * @param {string} [sId] Id for the new control, generated automatically if no id is given\n     * @param {object} [mSettings] Initial settings for the new control\n     */\n    constructor() {\n      Control.prototype.constructor.apply(this, arguments);\n\n      // initialization phase finished, update routine is enabled again\n      this._getChartUpdateHandler().release();\n    },\n\n    /**\n     * Method called before control gets rendered\n     * @private\n     * @override\n     */\n    onBeforeRendering() {\n      // don't process update routine rendering procedure\n      this._getChartUpdateHandler().halt();\n\n      // destroy chart before rerendering\n      if (this._chart) {\n        this._chart.destroy();\n      }\n    },\n\n    /**\n     * Renderer function of control <code>ui5.viz.Chart</code>.\n     *\n     * @param {object} [oRm] Render Manager\n     * @param {object} [oControl] Current control (this)\n     */\n    renderer(oRm, oControl) {\n      // start render wrapper div\n      oRm.write('<div');\n      oRm.writeControlData(oControl);\n      oRm.addClass(oControl.CSS_CLASS);\n      oRm.writeClasses();\n      oRm.write('>');\n\n      // end render wrapper div\n      oRm.write('</div>');\n    },\n\n    /**\n     * Method called after control gets rendered\n     * @private\n     * @override\n     */\n    onAfterRendering() {\n      let oXAxis = this.getXAxis(),\n          oYAxis = this.getYAxis(),\n          oY2Axis = this.getY2Axis(),\n          aSeries = this.getSeries(),\n          aHighlightedDataPoints = [];\n\n      // enable/disable axis depending on microMode is active or not\n      oXAxis.setProperty('visible', !this.getMicroMode(), true);\n      oYAxis.setProperty('visible', !this.getMicroMode(), true);\n      oY2Axis.setProperty('visible', !this.getMicroMode(), true);\n\n      // because properties can't be take into account during rendering, we must process all properties and aggregations manually here\n\n      // initialize c3 chart\n      this._chart = c3.generate({\n        bindto: `#${this.getId()}`,\n        size: {\n          width: this.getWidth(),\n          // the x-axis title needs 15px more space, this must be calculated here\n          height: this.getHeigth() - (oXAxis.getShowTitle() && oXAxis.getVisible() && oXAxis.getTitle() ? 15 : 0)\n        },\n        // undefined will activate the automatic calculation of c3js\n        padding: {\n          top: this.getMicroMode() ? 0 : undefined,\n          // the x-axis title needs 15px more space, this must be calculated here\n          bottom: oXAxis.getShowTitle() && oXAxis.getVisible() && oXAxis.getTitle() ? 15 : undefined,\n          left: this.getMicroMode() ? 0 : undefined,\n          right: this.getMicroMode() ? 0 : undefined\n        },\n        subchart: {\n          show: this.getShowSubchart()\n        },\n        zoom: {\n          enabled: this.getZoomEnabled()\n        },\n        legend: {\n          position: this.getLegendPosition(),\n          show: this.getShowLegend()\n        },\n        tooltip: {\n          show: this.getShowTooltip(),\n          grouped: this.getGroupedTooltip(),\n          format: {\n            value: (value, ratio, seriesKey, index) => {\n              const oSeries = aSeries.find(oSeries => oSeries.getKey() === seriesKey);\n              const oDataPoint = oSeries ? oSeries.getData()[index] : null;\n              const sLabel = oDataPoint ? oDataPoint.getLabel() : value;\n              return sLabel ? sLabel : value;\n            },\n            title: (() => {\n              // check if an index based formatter function must be used or a time based formatter\n              switch (this.getXAxisType()) {\n                // TIME BASED LABELS\n                case library.AxisType.Time:\n                  return oDate => {\n                    return sap.ui.core.format.DateFormat.getInstance({ style: 'long' }).format(oDate);\n                  };\n                // INDEX BASED LABELS\n                case library.AxisType.Default:\n                default:\n                  return iXIndex => {\n                    const oLabel = oXAxis.getLabels()[iXIndex];\n                    const sTitle = oLabel.getTitle() === '' ? oLabel.getValue() : oLabel.getTitle();\n                    // show nothing if label doesn't exist or if label is invisible\n                    // if title is blank show value instead\n                    return oLabel && oLabel.getVisible() ? sTitle : undefined; // undefined will result in a hidden label (null is converted to string 'null')\n                  };\n              }\n            })()\n          }\n        },\n        data: {\n          x: 'x',\n          columns: [\n          // add x axis values first\n          ['x', ...oXAxis.getLabels().map(oLabel => oLabel.getValue())],\n          // add series e.g. ['data1', 1, 4, 6, 8, 10, ...]\n          ...aSeries.map(oSeries => {\n            // get all data points\n            let aData = oSeries.getData().map((oDataPoint, iIndex) => {\n              // check if data point should be highlighted\n              let isVisible = oDataPoint.getVisible() && oDataPoint.getValue() !== 'null' && oDataPoint.getValue();\n              if (isVisible && oDataPoint.getHighlightAnimation() !== library.DataPointAnimation.None) {\n                aHighlightedDataPoints.push({\n                  series: oSeries.getKey(),\n                  point: iIndex,\n                  animation: oDataPoint.getHighlightAnimation()\n                });\n              }\n              return isVisible ? parseInt(oDataPoint.getValue(), 10) : null;\n            }) || [];\n\n            // add key of data series\n            aData.unshift(oSeries.getKey());\n\n            // return series structure\n            return aData; // e.g. ['data1', 1, 4, 6, 8, 10, ...]\n          })],\n          axes: aSeries.length === 0 ? [] : aSeries.reduce((oTypes, oSeries) => {\n            // return a map with the structure: { @seriesKey: @seriesYAxis, ... }\n            oTypes[oSeries.getKey()] = oSeries.getYAxis();\n            return oTypes;\n          }, {}),\n          types: aSeries.length === 0 ? [] : aSeries.reduce((oTypes, oSeries) => {\n            // return a map with the structure: { @seriesKey: @seriesType, ... }\n            oTypes[oSeries.getKey()] = oSeries.getType();\n            return oTypes;\n          }, {}),\n          names: aSeries.length === 0 ? [] : aSeries.reduce((oTypes, oSeries) => {\n            // return a map with the structure: { @seriesKey: @seriesName, ... }\n            oTypes[oSeries.getKey()] = oSeries.getName() || oSeries.getKey();\n            return oTypes;\n          }, {}),\n          colors: aSeries.length === 0 ? [] : aSeries.reduce((oTypes, oSeries) => {\n            // return a map with the structure: { @seriesKey: @seriesColor, ... }\n            if (oSeries.getColor()) {\n              oTypes[oSeries.getKey()] = oSeries.getColor();\n            }\n            return oTypes;\n          }, {}),\n          labels: {\n            format: aSeries.length === 0 ? [] : aSeries.reduce((oTypes, oSeries) => {\n              // return a map with the structure: { @seriesKey: @seriesFormatFunction, ... }\n              oTypes[oSeries.getKey()] = (value, seriesKey, index) => {\n                const sLabel = oSeries.getData()[index] ? oSeries.getData()[index].getLabel() : null;\n                const sValidatedLabel = sLabel ? sLabel : value;\n                // if showLabels = true then display label or value\n                return oSeries.getShowLabels() ? sValidatedLabel : null;\n              };\n              return oTypes;\n            }, {})\n          },\n          groups: aSeries.length === 0 ? [] : aSeries.reduce((aGroups, oSeries) => {\n            // collect all group keys\n            if (oSeries && oSeries.getGroupKey() && !aGroups.includes(oSeries.getGroupKey())) {\n              aGroups.push(oSeries.getGroupKey());\n            }\n            return aGroups;\n          }, []).map(sGroupKey => {\n            // return for each group key the list of respective series keys (['data1', 'data2'])\n            return aSeries.filter(oSeries => oSeries.getGroupKey() === sGroupKey).map(oSeries => oSeries.getKey());\n          })\n        },\n        color: {\n          pattern: this.getColors().map(oColor => oColor.getColor()).concat(\n          // retrieve custom color palette first if available\n          library.ColorPalette.custom ? library.ColorPalette.custom : library.ColorPalette.Material300)\n        },\n        axis: {\n          rotated: this.getSwitchAxisPosition(),\n          x: {\n            show: oXAxis.getVisible(),\n            type: (() => {\n              switch (this.getXAxisType()) {\n                case library.AxisType.Time:\n                  return 'timeseries';\n\n                case library.AxisType.Default:\n                default:\n                  return 'category';\n              }\n            })(),\n            max: oXAxis.getMaxValue() ? oXAxis.getMaxValue() : undefined,\n            min: oXAxis.getMinValue() ? oXAxis.getMinValue() : undefined,\n            tick: {\n              centered: false,\n              // count: 10, >> this value should be set automatically\n              // rotate: 45, >> c3js is a little bit buggy here, CSS solution may be required\n              format: (() => {\n                // check if an index based formatter function must be used or a time based formatter\n                switch (this.getXAxisType()) {\n                  // TIME BASED LABELS\n                  case library.AxisType.Time:\n                    return oDate => {\n                      return sap.ui.core.format.DateFormat.getInstance({ pattern: 'MMM yyyy' }).format(oDate);\n                    };\n                  // INDEX BASED LABELS\n                  case library.AxisType.Default:\n                  default:\n                    return iXIndex => {\n                      const oLabel = oXAxis.getLabels()[iXIndex] || new ChartAxisLabel();\n                      const sTitle = oLabel.getTitle() === '' ? oLabel.getValue() : oLabel.getTitle();\n                      // show nothing if label doesn't exist or if label is invisible\n                      // if title is blank show value instead\n                      return oLabel && oLabel.getVisible() ? sTitle : undefined; // undefined will result in a hidden label (null is converted to string 'null')\n                    };\n                }\n              })()\n            },\n            label: {\n              text: oXAxis.getShowTitle() ? oXAxis.getTitle() : null,\n              position: 'outer-center'\n            }\n          },\n          y: {\n            show: oYAxis.getVisible(),\n            // inner: false,\n            // default: max = highest y axis value\n            max: oYAxis.getMaxValue() ? oYAxis.getMaxValue() : oYAxis.getLabels().reduce((pre, curr) => Math.max(pre === undefined ? -Infinity : pre, parseInt(curr.getValue(), 10)), undefined),\n            // default: min = lowest y axis value\n            min: oYAxis.getMinValue() ? oYAxis.getMinValue() : oYAxis.getLabels().reduce((pre, curr) => Math.min(pre === undefined ? Infinity : pre, parseInt(curr.getValue(), 10)), undefined),\n            // inverted: false,\n            // center: 0,\n            padding: {\n              top: this.getMicroMode() ? undefined : 0, // should maybe made configurable\n              bottom: this.getMicroMode() ? undefined : 0\n            },\n            default: [\n            // identify min and max value to set default range\n            oYAxis.getMinValue() ? oYAxis.getMinValue() : oYAxis.getLabels().reduce((pre, curr) => Math.min(pre === undefined ? Infinity : pre, parseInt(curr.getValue(), 10)), undefined), oYAxis.getMaxValue() ? oYAxis.getMaxValue() : oYAxis.getLabels().reduce((pre, curr) => Math.max(pre === undefined ? -Infinity : pre, parseInt(curr.getValue(), 10)), undefined)],\n            tick: {\n              // count: 5, >> this value should be set automatically\n              values: oYAxis.getLabels().length > 0 ? oYAxis.getLabels().map(oLabel => parseInt(oLabel.getValue(), 10)) : null,\n              format: iYValue => {\n                const oLabel = oYAxis.getLabels().find(oLabel => parseInt(oLabel.getValue(), 10) === iYValue);\n                if (!oLabel) {\n                  // if no label exist, show value\n                  return iYValue;\n                }\n\n                const sTitle = oLabel.getTitle() === '' ? oLabel.getValue() : oLabel.getTitle();\n\n                // show nothing if label is explicit invisible, else show title or value (if title is blank)\n                return oLabel.getVisible() ? sTitle : undefined; // undefined will result in a hidden label (null is converted to string 'null')\n              }\n            },\n            label: {\n              text: oYAxis.getShowTitle() ? oYAxis.getTitle() : null,\n              position: 'outer-middle'\n            }\n          },\n          y2: {\n            show: oY2Axis.getVisible(),\n            // inner: false,\n            max: oY2Axis.getMaxValue() ? oY2Axis.getMaxValue() : undefined,\n            min: oY2Axis.getMinValue() ? oY2Axis.getMinValue() : undefined,\n            // inverted: false,\n            // center: 0,\n            padding: {\n              top: 0, // should maybe made configurable\n              bottom: 0\n            },\n            default: [\n            // identify min and max value to set default range\n            oY2Axis.getMinValue() ? oY2Axis.getMinValue() : oY2Axis.getLabels().reduce((pre, curr) => Math.min(pre === undefined ? Infinity : pre, parseInt(curr.getValue(), 10)), undefined), oY2Axis.getMaxValue() ? oY2Axis.getMaxValue() : oY2Axis.getLabels().reduce((pre, curr) => Math.max(pre === undefined ? -Infinity : pre, parseInt(curr.getValue(), 10)), undefined)],\n            tick: {\n              // count: 5, >> this value should be set automatically\n              values: oY2Axis.getLabels().length > 0 ? oY2Axis.getLabels().map(oLabel => parseInt(oLabel.getValue(), 10)) : null,\n              format: iY2Value => {\n                const oLabel = oY2Axis.getLabels().find(oLabel => parseInt(oLabel.getValue(), 10) === iY2Value);\n                if (!oLabel) {\n                  // if no label exist, show value\n                  return iY2Value;\n                }\n\n                const sTitle = oLabel.getTitle() === '' ? oLabel.getValue() : oLabel.getTitle();\n\n                // show nothing if label is explicit invisible, else show title or value (if title is blank)\n                return oLabel.getVisible() ? sTitle : undefined; // undefined will result in a hidden label (null is converted to string 'null')\n              }\n            },\n            label: {\n              text: oY2Axis.getShowTitle() ? oY2Axis.getTitle() : null,\n              position: 'outer-middle'\n            }\n          }\n        },\n        grid: {\n          x: {\n            show: oXAxis.getShowGridLines(),\n            lines: this.getLines().filter(oLine => oLine.getVisible() && oLine.getAxis() === library.Axis.X).map(oLine => {\n              return this._mapChartLineToC3Line(oLine);\n            })\n          },\n          y: {\n            show: oYAxis.getShowGridLines(),\n            lines: this.getLines().filter(oLine => oLine.getVisible() && oLine.getAxis() !== library.Axis.X).map(oLine => {\n              return this._mapChartLineToC3Line(oLine);\n            })\n          }\n        },\n        regions: this.getAreas().filter(oArea => oArea.getVisible()).map(oArea => {\n          return {\n            id: oArea.getId(),\n            start: oArea.getStartValue(),\n            end: oArea.getEndValue(),\n            axis: oArea.getAxis(),\n            text: oArea.getTitle(),\n            // position: oArea.getTitlePosition(),\n            // add three classes: general line class, line style class and line identifier\n            class: this.CSS_CLASS_AREA + ' ' + this.CSS_CLASS_AREA + '-' + oArea.getId()\n          };\n        }),\n        transition: {\n          duration: 175\n        }\n      });\n\n      // >>> continue styling\n\n      // highlight data ponts\n      d3.selectAll(`#${this.getId()} g.c3-circles circle.c3-circle`).classed(this.CSS_HIGHLIGHT_PULSATE, false);\n      if (aHighlightedDataPoints.length > 0) {\n        aHighlightedDataPoints.forEach(oHighlightInfo => {\n          d3.select(`#${this.getId()} g.c3-circles-${oHighlightInfo.series} circle.c3-circle-${oHighlightInfo.point}`).classed(this.CSS_HIGHLIGHT_PULSATE, true);\n        });\n      }\n\n      // set series style for shape areas\n      this._updateSeriesStyles();\n\n      // update line styles\n      this._updateLineStyles();\n\n      // update area styles\n      this._updateAreaStyles();\n\n      // set clippath of zoom overflow area\n      if (this.getClipZoomOverflow()) {\n        this.removeStyleClass(this.CSS_CLASS_NOCLIP);\n      } else {\n        this.addStyleClass(this.CSS_CLASS_NOCLIP);\n      }\n\n      // set background color\n      if (this.getDomRef()) $(this.getDomRef()).css('background-color', this.getBackgroundColor());\n\n      // attach on window resize handler\n      $(window).resize(this._resize.bind(this));\n\n      // call resize after a little delay, because sometimes the parent view needs some time until transition to full size finished\n      setTimeout(() => {\n        this._resize();\n      }, 150);\n      setTimeout(() => {\n        this._resize();\n      }, 1500);\n\n      // enable update loop, again\n      this._getChartUpdateHandler().release();\n    },\n\n    /**\n     * The exit() method is used to clean up resources and to deregister event handlers.\n     * If the exit() method is implemented, SAPUI5 core invokes the method for each control instance when it is destroyed.\n     * @private\n     * @override\n     */\n    exit() {},\n\n    /* =========================================================== */\n    /* override methods                                            */\n    /* =========================================================== */\n\n    /**\n     * Setter for property <code>dataVisible</code>.\n     *\n     * @param {boolean} bDataVisible Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setDataVisible(bDataVisible) {\n      if (this._chart) bDataVisible ? this._chart.show() : this._chart.hide();\n      return this.setProperty('dataVisible', bDataVisible, true); // do not rerender\n    },\n\n    /**\n     * Setter for property <code>width</code>.\n     *\n     * @param sWidth {sap.ui.core.CSSSize} Expects a sap.ui.core.CSSSize element\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setWidth(sWidth) {\n      this.setProperty('width', sWidth, true); // do not rerender\n      this._chart ? this._chart.resize({ width: this.getWidth() }) : undefined;\n      return this;\n    },\n\n    /**\n     * Setter for property <code>height</code>.\n     *\n     * @param sHeight {sap.ui.core.CSSSize} Expects a sap.ui.core.CSSSize element\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setHeight(sHeight) {\n      this.setProperty('height', sHeight, true); // do not rerender\n      this._chart ? this._chart.resize({ height: this.getHeigth() }) : undefined;\n      return this;\n    },\n\n    /**\n     * Getter for property <code>width</code>.\n     *\n     * @return {number} Returns calculated size in pixel value based on sap.ui.core.CSSSize element\n     * @public\n     */\n    getWidth() {\n      return this._getComputedSize(this.getProperty('width'), 'width');\n    },\n\n    /**\n     * Getter for property <code>height</code>.\n     *\n     * @return {number} Returns calculated size in pixel value based on sap.ui.core.CSSSize element\n     * @public\n     */\n    getHeigth() {\n      return this._getComputedSize(this.getProperty('height'), 'height');\n    },\n\n    /**\n     * Setter for property <code>showSubchart</code>.\n     *\n     * @param bShowSubchart {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setShowSubchart(bShowSubchart) {\n      // live update by c3 API is not working, yet, therefore we must rerender the chart\n      // if (this._chart) this._chart.subchart = { show: bShowSubchart };\n      return this.setProperty('showSubchart', bShowSubchart, false); // force rerender\n    },\n\n    /**\n     * Setter for property <code>microMode</code>.\n     *\n     * @param bMicroMode {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setMicroMode(bMicroMode) {\n      if (bMicroMode) {\n        this.addStyleClass(this.CSS_CLASS_MICRO_MODE);\n      } else {\n        this.removeStyleClass(this.CSS_CLASS_MICRO_MODE);\n      }\n\n      // Hint: disable/enable all axis is done in update and onAfterRendering method\n\n      return this.setProperty('microMode', bMicroMode, false); // force rerender\n    },\n\n    /**\n     * Setter for property <code>zoomEnabled</code>.\n     *\n     * @param bZoomEnabled {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setZoomEnabled(bZoomEnabled) {\n      if (this._chart) this._chart.zoom.enable(bZoomEnabled);\n      return this.setProperty('zoomEnabled', bZoomEnabled, true); // do not rerender\n    },\n\n    /**\n     * Setter for property <code>clipZoomOverflow</code>.\n     *\n     * @param bClipZoomOverflow {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setClipZoomOverflow(bClipZoomOverflow) {\n      if (bClipZoomOverflow) {\n        this.removeStyleClass(this.CSS_CLASS_NOCLIP);\n      } else {\n        this.addStyleClass(this.CSS_CLASS_NOCLIP);\n      }\n      return this.setProperty('clipZoomOverflow', bClipZoomOverflow, true); // do not rerender\n    },\n\n    /**\n     * Setter for property <code>showDataPoints</code>.\n     *\n     * @param bShowDataPoints {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setShowDataPoints(bShowDataPoints) {\n      if (bShowDataPoints) {\n        this.removeStyleClass(this.CSS_CLASS_NO_POINTS);\n      } else {\n        this.addStyleClass(this.CSS_CLASS_NO_POINTS);\n      }\n      return this.setProperty('showDataPoints', bShowDataPoints, true); // do not rerender\n    },\n\n    /**\n     * Setter for property <code>backgroundColor</code>.\n     *\n     * @param sBackgroundColor {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setBackgroundColor(sBackgroundColor) {\n      if (this.getDomRef()) $(this.getDomRef()).css('background-color', sBackgroundColor);\n      return this.setProperty('backgroundColor', sBackgroundColor, true); // do not rerender\n    },\n\n    /**\n     * Setter for property <code>legendPosition</code>.\n     *\n     * @param sLegendPosition {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setLegendPosition(sLegendPosition) {\n      // live update by c3 API is not working, yet, therefore we must rerender the chart\n      // TODO: check if custom modification is possible: c3.chart.fn.legend.position = function (position) { ... }\n      // if (this._chart) this._chart.legend.position = sLegendPosition;\n      return this.setProperty('legendPosition', sLegendPosition, false); // force rerender\n    },\n\n    /**\n     * Setter for property <code>showLegend</code>.\n     *\n     * @param bShowLegend {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setShowLegend(bShowLegend) {\n      if (this._chart) bShowLegend ? this._chart.legend.show() : this._chart.legend.hide();\n      return this.setProperty('showLegend', bShowLegend, true); // do not rerender\n    },\n\n    /**\n     * Setter for property <code>showTooltip</code>.\n     *\n     * @param bShowTooltip {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setShowTooltip(bShowTooltip) {\n      // live update by c3 API is not working, yet, therefore we must rerender the chart\n      // if (this._chart) bShowTooltip ? this._chart.tooltip.show() : this._chart.tooltip.hide();\n      return this.setProperty('showTooltip', bShowTooltip, false); // force rerender\n    },\n\n    /**\n     * Setter for property <code>groupedTooltip</code>.\n     *\n     * @param bGroupedTooltip {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setGroupedTooltip(bGroupedTooltip) {\n      // live update by c3 API is not working, yet, therefore we must rerender the chart\n      // if (this._chart) this._chart.tooltip.grouped = bGroupedTooltip;\n      return this.setProperty('groupedTooltip', bGroupedTooltip, false); // force rerender\n    },\n\n    /**\n     * Setter for property <code>switchAxisPosition</code>.\n     *\n     * @param bSwitchAxisPosition {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setSwitchAxisPosition(bSwitchAxisPosition) {\n      // live update by c3 API is not working, yet, therefore we must rerender the chart\n      // if (this._chart) this._chart.axis.rotated = bSwitchAxisPosition;\n      return this.setProperty('switchAxisPosition', bSwitchAxisPosition, false); // force rerender\n    },\n\n    /**\n     * Setter for property <code>xAxisType</code>.\n     *\n     * @param bXAxisType {boolean} Expects a boolean\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @public\n     */\n    setXAxisType(bXAxisType) {\n      // live update by c3 API is not working, yet, therefore we must rerender the chart\n      return this.setProperty('xAxisType', bXAxisType, false); // force rerender\n    },\n\n    /**\n     * Getter for aggregation <code>xAxis</code>.\n     *\n     * @return {ui5.viz.ChartAxis} return x axis\n     * @public\n     */\n    getXAxis() {\n      let iSeriesTicks, iAxisTicks, iDeltaTicks, oXAxis;\n\n      oXAxis = this.getAggregation('xAxis');\n      if (!oXAxis) {\n        oXAxis = new ChartAxis();\n        this.setAggregation('xAxis', oXAxis, true); // do not rerender\n      }\n\n      // get maximal axis ticks\n      iSeriesTicks = Math.max.apply(Math, this.getSeries().length === 0 ? [0] : this.getSeries().map(oSeries => oSeries.getData().length));\n\n      // add missing ticks if required\n      iAxisTicks = oXAxis.getLabels().length;\n\n      if (iAxisTicks < iSeriesTicks) {\n        iDeltaTicks = iSeriesTicks - iAxisTicks;\n        for (let i = 0; i <= iDeltaTicks; i++) {\n          // add label without fire update event\n          Control.prototype.addAggregation.call(oXAxis, 'labels', new ChartAxisLabel({ value: iAxisTicks + i }), true);\n        }\n      }\n\n      return oXAxis;\n    },\n\n    /**\n     * Getter for aggregation <code>yAxis</code>.\n     *\n     * @return {ui5.viz.ChartAxis} return y axis\n     * @public\n     */\n    getYAxis() {\n      let oYAxis;\n\n      oYAxis = this.getAggregation('yAxis');\n      if (!oYAxis) {\n        oYAxis = new ChartAxis();\n        this.setAggregation('yAxis', oYAxis, true); // do not rerender\n      }\n\n      return oYAxis;\n    },\n\n    /**\n     * Getter for aggregation <code>y2Axis</code>.\n     *\n     * @return {ui5.viz.ChartAxis} return y2 axis\n     * @public\n     */\n    getY2Axis() {\n      let oY2Axis;\n\n      oY2Axis = this.getAggregation('y2Axis');\n      if (!oY2Axis) {\n        oY2Axis = new ChartAxis({\n          visible: false\n        });\n        this.setAggregation('y2Axis', oY2Axis, true); // do not rerender\n      }\n\n      return oY2Axis;\n    },\n\n    /**\n     * Sets a new object in the named 0..1 aggregation of this ManagedObject and marks this ManagedObject as changed.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be set.\n     * @param oObject {sap.ui.base.ManagedObject} the ManagedObject to add; if empty, nothing is inserted.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    setAggregation(sAggregationName, oObject, bSuppressInvalidate) {\n      if (oObject) {\n        // set internal axis type\n        switch (sAggregationName) {\n          case 'xAxis':\n            oObject.setProperty('_axisType', library.Axis.X, true);\n            break;\n          case 'yAxis':\n            oObject.setProperty('_axisType', library.Axis.Y, true);\n            break;\n          case 'y2Axis':\n            oObject.setProperty('_axisType', library.Axis.Y2, true);\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (['xAxis', 'yAxis', 'y2Axis2'].includes(sAggregationName)) {\n        // other than the CHartSeries, we must rerender the chart when an Axis is added, because not all attributes/aggregations can be updated via c3js API, yet\n        Control.prototype.setAggregation.call(this, sAggregationName, oObject, false); // force rerender\n\n        // forward dataUpdate event\n        if (oObject) {\n          oObject.attachAxisUpdate(oEvent => this._onDataUpdateByCode(oEvent.getParameter('code')));\n        }\n      } else {\n        Control.prototype.setAggregation.call(this, sAggregationName, oObject, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Inserts managed object oObject to the aggregation named sAggregationName at position iIndex.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param oObject {sap.ui.base.ManagedObject} the ManagedObject to add; if empty, nothing is inserted.\n     * @param iIndex {int} the 0-based index the managed object should be inserted at; for a negative value iIndex, oObject is inserted at position 0; for a value greater than the current size of the aggregation, oObject is inserted at the last position\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    insertAggregation(sAggregationName, oObject, iIndex, bSuppressInvalidate) {\n      // set initial unique key if not happened, yet\n      if (sAggregationName === 'series' && !oObject.getKey()) {\n        oObject.setKey(this._getNumberRangeCreator().getNext());\n      }\n\n      // Hint: because, data.format can't be updated by c3js api, yet, we must rerender the chart, when a new aggregation was added\n      if (['lines', 'areas'].includes(sAggregationName)) {\n        // important: update value, before fire event\n        Control.prototype.insertAggregation.call(this, sAggregationName, oObject, iIndex, true);\n\n        // forward aggregation update events & inform observers about data update\n        switch (sAggregationName) {\n          // case 'series':\n          //     oObject.attachSeriesDataUpdate(oEvent => this._onDataUpdateByCode(oEvent.getParameter('code')));\n          //     oObject.attachSeriesVisibilityChange(this._onSeriesVisibilityUpdate.bind(this));\n          //     this._onDataUpdateByCode(library.ChartUpdateCode.DataPoint);\n          //     break;\n          case 'lines':\n            oObject.attachLineUpdate(oEvent => this._onDataUpdateByCode(oEvent.getParameter('code')));\n            this._onDataUpdateByCode(library.ChartUpdateCode.Line);\n            break;\n          case 'areas':\n            oObject.attachAreaUpdate(oEvent => this._onDataUpdateByCode(oEvent.getParameter('code')));\n            this._onDataUpdateByCode(library.ChartUpdateCode.Area);\n            break;\n          default:\n            break;\n        }\n      } else {\n        Control.prototype.insertAggregation.call(this, sAggregationName, oObject, iIndex, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Adds some entity oObject to the aggregation identified by sAggregationName.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param oObject {sap.ui.base.ManagedObject} the ManagedObject to add; if empty, nothing is inserted.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    addAggregation(sAggregationName, oObject, bSuppressInvalidate) {\n      // set initial unique key if not happened, yet\n      if (sAggregationName === 'series' && !oObject.getKey()) {\n        oObject.setKey(this._getNumberRangeCreator().getNext());\n      }\n\n      // Hint: because, data.format can't be updated by c3js api, yet, we must rerender the chart, when a new aggregation was added\n      if (['lines', 'areas'].includes(sAggregationName)) {\n        // important: update value, before fire event\n        Control.prototype.addAggregation.call(this, sAggregationName, oObject, true);\n\n        // forward aggregation update events & inform observers about data update\n        switch (sAggregationName) {\n          // case 'series':\n          //     oObject.attachSeriesDataUpdate(oEvent => this._onDataUpdateByCode(oEvent.getParameter('code')));\n          //     oObject.attachSeriesVisibilityChange(this._onSeriesVisibilityUpdate.bind(this));\n          //     this._onDataUpdateByCode(library.ChartUpdateCode.DataPoint);\n          //     break;\n          case 'lines':\n            oObject.attachLineUpdate(oEvent => this._onDataUpdateByCode(oEvent.getParameter('code')));\n            this._onDataUpdateByCode(library.ChartUpdateCode.Line);\n            break;\n          case 'areas':\n            oObject.attachAreaUpdate(oEvent => this._onDataUpdateByCode(oEvent.getParameter('code')));\n            this._onDataUpdateByCode(library.ChartUpdateCode.Area);\n            break;\n          default:\n            break;\n        }\n      } else {\n        Control.prototype.addAggregation.call(this, sAggregationName, oObject, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes an object from the aggregation named sAggregationName with cardinality 0..n.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param oObject {sap.ui.base.ManagedObject} the ManagedObject to add; if empty, nothing is inserted.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    removeAggregation(sAggregationName, oObject, bSuppressInvalidate) {\n      if (['series', 'lines', 'areas'].includes(sAggregationName)) {\n        // important: update value, before fire event\n        Control.prototype.removeAggregation.call(this, sAggregationName, oObject, true);\n\n        // forward aggregation update events & inform observers about data update\n        switch (sAggregationName) {\n          case 'series':\n            this._onDataUpdateByCode(library.ChartUpdateCode.DataPoint);\n            break;\n          case 'lines':\n            this._onDataUpdateByCode(library.ChartUpdateCode.Line);\n            break;\n          case 'areas':\n            this._onDataUpdateByCode(library.ChartUpdateCode.Area);\n            break;\n          default:\n            break;\n        }\n      } else {\n        Control.prototype.removeAggregation.call(this, sAggregationName, oObject, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes all objects from the 0..n-aggregation named sAggregationName.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    removeAllAggregation(sAggregationName, bSuppressInvalidate) {\n      if (['series', 'lines', 'areas'].includes(sAggregationName)) {\n        // important: update value, before fire event\n        Control.prototype.removeAllAggregation.call(this, sAggregationName, true);\n\n        // forward aggregation update events & inform observers about data update\n        switch (sAggregationName) {\n          case 'series':\n            this._onDataUpdateByCode(library.ChartUpdateCode.DataPoint);\n            break;\n          case 'lines':\n            this._onDataUpdateByCode(library.ChartUpdateCode.Line);\n            break;\n          case 'areas':\n            this._onDataUpdateByCode(library.ChartUpdateCode.Area);\n            break;\n          default:\n            break;\n        }\n      } else {\n        Control.prototype.removeAllAggregation.call(this, sAggregationName, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Destroys (all) the managed object(s) in the aggregation named sAggregationName and empties the aggregation. If the aggregation did contain any object, this ManagedObject is marked as changed.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    destroyAggregation(sAggregationName, bSuppressInvalidate) {\n      if (['series', 'lines', 'areas'].includes(sAggregationName)) {\n        // important: update value, before fire event\n        Control.prototype.destroyAggregation.call(this, sAggregationName, true);\n\n        // forward aggregation update events & inform observers about data update\n        switch (sAggregationName) {\n          case 'series':\n            this._onDataUpdateByCode(library.ChartUpdateCode.DataPoint);\n            break;\n          case 'lines':\n            this._onDataUpdateByCode(library.ChartUpdateCode.Line);\n            break;\n          case 'areas':\n            this._onDataUpdateByCode(library.ChartUpdateCode.Area);\n            break;\n          default:\n            break;\n        }\n      } else {\n        Control.prototype.destroyAggregation.call(this, sAggregationName, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets or unsets a model for the given model name for this ManagedObject.\n     *\n     * @param {sap.ui.model.Model} [oModel] The model to be set or null or undefined.\n     * @param {string} [sName] The name of the model or undefined.\n     * @returns {ui5.viz.ChartSeries} This instance for chaining.\n     * @public\n     */\n    setModel(oModel, sName) {\n      // to improve performance, we disable chart update until the complete model was assigned\n      this._getChartUpdateHandler().halt();\n\n      Control.prototype.setModel.apply(this, arguments);\n\n      this._getChartUpdateHandler().release();\n\n      // trigger update method manually\n      this._onDataUpdateByCode();\n\n      return this;\n    },\n\n    /* =========================================================== */\n    /* public methods                                              */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* private methods                                             */\n    /* =========================================================== */\n\n    /**\n     * Update chart data by update code.\n     *\n     * @param {string} [sCode] Update code\n     * @private\n     */\n    _onDataUpdateByCode(sCode) {\n      // don't call update routine if it is halted by someone or chart is not initialized, yet\n      if (this._getChartUpdateHandler().isHalted()) {\n        return;\n      } else if (!this._chart) {\n        this.rerender();\n        return;\n      }\n\n      // TODO: Finish switch case statement to check which part should be updated\n      switch (sCode) {\n        case library.ChartUpdateCode.Line:\n          // update chart lines only\n          this._debounceUpdateChartLines();\n\n          // inform observers about data update\n          this.fireChartDataUpdate();\n          break;\n\n        case library.ChartUpdateCode.Area:\n          // update chart areas only\n          this._debounceUpdateChartAreas();\n\n          // inform observers about data update\n          this.fireChartDataUpdate();\n          break;\n\n        default:\n          // update almost everything but debounced, to collect several update requests\n          this._debounceUpdate();\n\n          // inform observers about data update\n          this.fireChartDataUpdate();\n          break;\n      }\n    },\n\n    /**\n     * Update chart data. This method shoud only be called in a debounced mode.\n     *\n     * @private\n     */\n    _onDataUpdate() {\n      // console.error('UPDATE THE CHART');\n\n      const aSeries = this.getSeries();\n      const aSeriesKeys = aSeries.map(oSeries => oSeries.getKey());\n      const aNewSeries = aSeriesKeys.filter(sKey => this._chart.data().map(oSeries => oSeries.id).every(sId => sId === sKey) === false);\n      const aObsoleteSeries = this._chart.data().map(oSeries => oSeries.id).filter(sId => aSeriesKeys.some(sKey => sKey === sId) === false);\n      const aHighlightedDataPoints = [];\n      const oXAxis = this.getXAxis();\n      const oYAxis = this.getYAxis();\n      const oY2Axis = this.getY2Axis();\n\n      // check if new series have been added, if yes, we must stop update method and rerender control, because data.format can't be updated by c3js api, yet\n      if (aNewSeries.length > 0 || aObsoleteSeries.length > 0) {\n        this.rerender();\n        return;\n      }\n\n      // enable/disable axis depending on microMode is active or not (call on Control to prevent fire update event)\n      Control.prototype.setProperty.call(oXAxis, 'visible', !this.getMicroMode(), true);\n      Control.prototype.setProperty.call(oYAxis, 'visible', !this.getMicroMode(), true);\n      Control.prototype.setProperty.call(oY2Axis, 'visible', !this.getMicroMode(), true);\n\n      // 1. unload series, not used anymore\n      this._chart.unload(aObsoleteSeries);\n\n      // 2. load new series and new data\n      this._chart.load({\n        // update series data\n        x: 'x',\n        columns: [\n        // add x axis values first\n        ['x', ...oXAxis.getLabels().map(oLabel => oLabel.getValue())],\n        // add series e.g. ['data1', 1, 4, 6, 8, 10, ...]\n        ...aSeries.map(oSeries => [\n        // get key (e.g. 'data1')\n        oSeries.getKey(),\n        // get data points (e.g. [1, 4, 6, 8, 10, ...])\n        ...oSeries.getData().map((oDataPoint, iIndex) => {\n          // check if data point should be highlighted\n          let isVisible = oDataPoint.getVisible() && oDataPoint.getValue() !== 'null' && oDataPoint.getValue();\n          if (isVisible && oDataPoint.getHighlightAnimation() !== library.DataPointAnimation.None) {\n            aHighlightedDataPoints.push({\n              series: oSeries.getKey(),\n              point: iIndex,\n              animation: oDataPoint.getHighlightAnimation()\n            });\n          }\n          return isVisible ? parseInt(oDataPoint.getValue(), 10) : null;\n        })])],\n\n        // update axis assignment\n        axes: aSeries.length === 0 ? [] : aSeries.reduce((oTypes, oSeries) => {\n          // return a map with the structure: { @seriesKey: @seriesYAxis, ... }\n          oTypes[oSeries.getKey()] = oSeries.getYAxis();\n          return oTypes;\n        }, {}),\n\n        // update series types\n        types: aSeries.length === 0 ? [] : aSeries.reduce((oTypes, oSeries) => {\n          // return a map with the structure: { @seriesKey: @seriesType, ... }\n          oTypes[oSeries.getKey()] = oSeries.getType();\n          return oTypes;\n        }, {}),\n\n        // update series names\n        names: aSeries.length === 0 ? [] : aSeries.reduce((oTypes, oSeries) => {\n          // return a map with the structure: { @seriesKey: @seriesName, ... }\n          oTypes[oSeries.getKey()] = oSeries.getName() || oSeries.getKey();\n          return oTypes;\n        }, {}),\n\n        // update series colors\n        colors: aSeries.length === 0 ? [] : aSeries.reduce((oTypes, oSeries) => {\n          // return a map with the structure: { @seriesKey: @seriesColor, ... }\n          if (oSeries.getColor()) {\n            oTypes[oSeries.getKey()] = oSeries.getColor();\n          }\n          return oTypes;\n        }, {})\n      });\n\n      // highlight data points\n      d3.selectAll(`#${this.getId()} g.c3-circles circle.c3-circle`).classed(this.CSS_HIGHLIGHT_PULSATE, false);\n      if (aHighlightedDataPoints.length > 0) {\n        aHighlightedDataPoints.forEach(oHighlightInfo => {\n          d3.select(`#${this.getId()} g.c3-circles-${oHighlightInfo.series} circle.c3-circle-${oHighlightInfo.point}`).classed(this.CSS_HIGHLIGHT_PULSATE, true);\n        });\n      }\n\n      // update groups\n      this._chart.groups(aSeries.length === 0 ? [] : aSeries.reduce((aGroups, oSeries) => {\n        // collect all group keys\n        if (oSeries && oSeries.getGroupKey() && !aGroups.includes(oSeries.getGroupKey())) {\n          aGroups.push(oSeries.getGroupKey());\n        }\n        return aGroups;\n      }, []).map(sGroupKey => {\n        // return for each group key the list of respective series keys (['data1', 'data2'])\n        return aSeries.filter(oSeries => oSeries.getGroupKey() === sGroupKey).map(oSeries => oSeries.getKey());\n      }));\n\n      // update series styles\n      this._updateSeriesStyles();\n\n      // update axis titles\n      this._chart.axis.labels({\n        x: oXAxis.getShowTitle() ? oXAxis.getTitle() : null,\n        y: oYAxis.getShowTitle() ? oYAxis.getTitle() : null,\n        y2: oY2Axis.getShowTitle() ? oY2Axis.getTitle() : null\n      });\n\n      this._chart.axis.showX(oXAxis.getVisible());\n      this._chart.axis.showY(oYAxis.getVisible());\n      this._chart.axis.showY2(oY2Axis.getVisible());\n\n      // update min/max for y axis\n      // TODO: Check why change of x axis range is not working without rerender (simple examples are working)\n      this._chart.axis.range({\n        min: {\n          X: oXAxis.getMinValue() ? oXAxis.getMinValue() : undefined,\n          y: oYAxis.getMinValue() ? oYAxis.getMinValue() : oYAxis.getLabels().reduce((pre, curr) => Math.min(pre === undefined ? Infinity : pre, parseInt(curr.getValue(), 10)), undefined),\n          y2: oY2Axis.getMinValue() ? oY2Axis.getMinValue() : undefined\n        },\n        max: {\n          x: oXAxis.getMaxValue() ? oXAxis.getMaxValue() : undefined,\n          y: oYAxis.getMaxValue() ? oYAxis.getMaxValue() : oYAxis.getLabels().reduce((pre, curr) => Math.max(pre === undefined ? -Infinity : pre, parseInt(curr.getValue(), 10)), undefined),\n          y2: oY2Axis.getMaxValue() ? oY2Axis.getMaxValue() : undefined\n        }\n      });\n\n      // not supported by c3js API, yet\n      // this._chart.axis.y.tick.values = oYAxis.getLabels().length > 0 ? oYAxis.getLabels().map(oLabel => parseInt(oLabel.getValue(), 10)) : null;\n      // this._chart.axis.y2.tick.values = oY2Axis.getLabels().length > 0 ? oY2Axis.getLabels().map(oLabel => parseInt(oLabel.getValue(), 10)) : null;\n\n      // not supported by c3js API, yet\n      // this._chart.grid.x.show = oXAxis.getShowGridLines();\n      // this._chart.grid.y.show = oYAxis.getShowGridLines();\n\n      // inform observers about data update\n      this.fireChartDataUpdate();\n    },\n\n    /**\n     * Update chart lines\n     *\n     * @private\n     */\n    _updateChartLines() {\n      const aOldXLines = [].concat(this._chart.xgrids());\n      const aOldYLines = [].concat(this._chart.ygrids());\n\n      const aNewXLines = this.getLines().filter(oLine => oLine.getVisible() && oLine.getAxis() === library.Axis.X).map(oNewLine => this._mapChartLineToC3Line(oNewLine));\n\n      const aNewYLines = this.getLines().filter(oLine => oLine.getVisible() && oLine.getAxis() !== library.Axis.X).map(oNewLine => this._mapChartLineToC3Line(oNewLine));\n\n      // update x grid lines\n      const aUpdateXList = aNewXLines.filter(oNewLine => {\n        const oOldLine = aOldXLines.find(oLine => oLine.id === oNewLine.id);\n        // compare old and new line\n        return oOldLine && _.isEqual(oNewLine, oOldLine) === false;\n      });\n\n      // if at least one event changed, we must reset all lines at once\n      if (aUpdateXList.length > 0) {\n        // OVERRIDE ALL\n        // in difference to areas, it is not possible to update existing lines via c3js API\n        this._chart.xgrids(aNewXLines);\n      } else {\n        // only remove and add operations are performed\n        // remove x grid lines (attention: complete class list must be provided, not only one unique class)\n        aOldXLines.filter(oLine => aNewXLines.every(oNewLine => oNewLine.id !== oLine.id)).forEach(oLine => {\n          this._chart.xgrids.remove({ class: oLine.class });\n        });\n\n        // add x grid lines\n        const aAddXList = aNewXLines.filter(oNewLine => aOldXLines.every(oLine => oLine.id !== oNewLine.id));\n        if (aAddXList.length > 0) {\n          this._chart.xgrids.add(aAddXList);\n        }\n      }\n\n      // update y grid lines\n      const aUpdateYList = aNewYLines.filter(oNewLine => {\n        const oOldLine = aOldYLines.find(oLine => oLine.id === oNewLine.id);\n        // compare old and new line\n        return oOldLine && _.isEqual(oNewLine, oOldLine) === false;\n      });\n\n      // if at least one event changed, we must reset all lines at once\n      if (aUpdateYList.length > 0) {\n        // OVERRIDE ALL\n        // in difference to areas, it is not possible to update existing lines via c3js API\n        this._chart.ygrids(aNewYLines);\n      } else {\n        // only remove and add operations are performed\n        // remove y grid lines (attention: complete class list must be provided, not only one unique class)\n        aOldYLines.filter(oLine => aNewYLines.every(oNewLine => oNewLine.id !== oLine.id)).forEach(oLine => {\n          this._chart.ygrids.remove({ class: oLine.class });\n        });\n\n        // add y grid lines\n        const aAddYList = aNewYLines.filter(oNewLine => aOldYLines.every(oLine => oLine.id !== oNewLine.id));\n        if (aAddYList.length > 0) {\n          this._chart.ygrids.add(aAddYList);\n        }\n      }\n\n      // update line styles\n      this._updateLineStyles();\n    },\n\n    /**\n     * Update chart areas\n     *\n     * @private\n     */\n    _updateChartAreas() {\n      const areas = this._chart.regions() || [];\n      // if only one area exist it may be returned as object and not wrapped in an arry, so we must do this manually\n      const aOldAreas = Array.isArray(areas) ? areas : [areas];\n      const aNewAreas = this.getAreas().filter(oArea => oArea.getVisible()).map(oArea => {\n        return {\n          id: oArea.getId(),\n          start: oArea.getStartValue(),\n          end: oArea.getEndValue(),\n          axis: oArea.getAxis(),\n          text: oArea.getTitle(),\n          // position: oArea.getTitlePosition(),\n          // add three classes: general line class, line style class and line identifier\n          class: `${this.CSS_CLASS_AREA} ${this.CSS_CLASS_AREA}-${oArea.getId()}`\n        };\n      });\n\n      // remove areas (attention: providing a single unique class is sufficient)\n      const aRemoveList = aOldAreas.filter(oArea => aNewAreas.every(oNewArea => oNewArea.id !== oArea.id)).map(oArea => `${this.CSS_CLASS_AREA}-${oArea.id}`); // c3 is expecting a list of classes to remove respective areas\n      if (aRemoveList.length > 0) {\n        this._chart.regions.remove({ classes: aRemoveList });\n      }\n\n      // add areas\n      const aAddList = aNewAreas.filter(oNewArea => aOldAreas.every(oArea => oArea.id !== oNewArea.id));\n      if (aAddList.length > 0) {\n        this._chart.regions.add(aAddList);\n      }\n\n      // update areas\n      const aUpdateList = aNewAreas.filter(oNewArea => {\n        const oOldArea = aOldAreas.find(oArea => oArea.id === oNewArea.id);\n        // compare old and new area\n        return oOldArea && _.isEqual(oNewArea, oOldArea) === false;\n      });\n      if (aUpdateList.length > 0) {\n        this._chart.regions(aUpdateList);\n      }\n\n      // update area styles\n      this._updateAreaStyles();\n    },\n\n    /**\n     * Map properties of ChartLine to an object compatible with c3js\n     *\n     * @param {ui5.viz.ChartLine} [oChartLine] PulseShift chart line.\n     * @returns {object} C3js line.\n     * @private\n     */\n    _mapChartLineToC3Line(oChartLine) {\n      const sShowSelectorClass = oChartLine.getShowLineSelector() ? this.CSS_CLASS_LINE_SHOWSELECTOR : '';\n      const sIconOnlyClass = oChartLine.getSelectorIconOnly() ? this.CSS_CLASS_LINE_ICONONLY : '';\n      return {\n        id: oChartLine.getId(),\n        value: oChartLine.getValue(),\n        axis: oChartLine.getAxis(),\n        text: oChartLine.getTitle(),\n        position: oChartLine.getTitlePosition(),\n        showSelector: oChartLine.getShowLineSelector() ? true : false,\n        // add three classes: general line class, line style class and line identifier\n        class: `${this.CSS_CLASS_LINE} ${this.CSS_CLASS_LINE}-${oChartLine.getStyle()} ${this.CSS_CLASS_LINE}-${oChartLine.getId()} ${sShowSelectorClass} ${sIconOnlyClass}`\n      };\n    },\n\n    /**\n     * Update chart series visibility\n     *\n     * @private\n     */\n    _onSeriesVisibilityUpdate(oEvent) {\n      let oSeries = oEvent.getParameter('chartSeries');\n      if (oSeries.getVisible()) {\n        this._chart.show(oSeries.getKey(), { withLegend: true });\n      } else {\n        this._chart.hide(oSeries.getKey(), { withLegend: true });\n      }\n    },\n\n    /**\n     * Update chart shape area styles\n     *\n     * @private\n     */\n    _updateSeriesStyles() {\n      // 1. get all series with a chart type that is relevant for shape AREA styles\n      this.getSeries().forEach(oSeries => {\n        let oPatternStyle,\n            sCurrentColor,\n            oPattern,\n\n        // set solid style if series type (e.g. bar) is not supporting line styles\n        sShapeStyle = this._isShapeType(oSeries.getType()) ? oSeries.getShapeStyle() : library.ShapeStyle.Default;\n\n        switch (sShapeStyle) {\n          case library.ShapeStyle.Striped:\n            // read current color\n            sCurrentColor = this._chart.data.colors()[oSeries.getKey()];\n\n            // add pattern to svg definitions\n            oPattern = d3.select(`#${this.getId()} defs #${this.getId()}-stripe-pattern-${oSeries.getKey()}`);\n            if (oPattern.empty()) {\n              oPattern = d3.select(`#${this.getId()} defs`).append('pattern').attr({\n                id: `${this.getId()}-stripe-pattern-${oSeries.getKey()}`,\n                width: '8',\n                height: '8',\n                patternUnits: 'userSpaceOnUse',\n                class: `stripe-pattern-${oSeries.getKey()}`\n              }).append('path').attr({ d: 'M1,0L5,0L0,5L0,1L1,0 M8,1L8,5L5,8L1,8L8,1' });\n            }\n\n            // add css to svg definitions\n            oPatternStyle = d3.select(`#${this.getId()} defs #${this.getId()}-stripe-style-${oSeries.getKey()}`);\n            if (oPatternStyle.empty()) {\n              oPatternStyle = d3.select(`#${this.getId()} defs`).append('style').attr({\n                id: `${this.getId()}-stripe-style-${oSeries.getKey()}`,\n                type: 'text/css'\n              });\n            }\n            // update svg pattern style\n            oPatternStyle.text(`#${this.getId()} .stripe-pattern-${oSeries.getKey()} path {\n                                    fill: ${sCurrentColor};\n                                    stroke: none;\n                                }\n                                #${this.getId()} .c3-target-${oSeries.getKey()} .c3-shape {\n                                    fill: url(#${this.getId()}-stripe-pattern-${oSeries.getKey()}) !important;\n                                }`);\n            break;\n          case library.ShapeStyle.Default:\n          default:\n            // remove pattern style from shape area\n            oPatternStyle = d3.select(`#${this.getId()} defs #${this.getId()}-stripe-style-${oSeries.getKey()}`);\n            if (!oPatternStyle.empty()) {\n              oPatternStyle.text('');\n            }\n            break;\n        }\n      });\n\n      // 2. get all series with a chart type that is relevant for shape LINE styles\n      this.getSeries().forEach(oSeries => {\n        let oStrokeStyle,\n            sDashArray,\n\n        // set solid style if series type (e.g. bar) is not supporting line styles\n        sLineStyle = this._isLineType(oSeries.getType()) ? oSeries.getLineStyle() : library.LineStyle.Default,\n            iAnimationSpeed;\n\n        // set animation speed\n        switch (oSeries.getLineAnimationSpeed()) {\n          case library.AnimationSpeed.Fast:\n            iAnimationSpeed = 20;\n            break;\n          case library.AnimationSpeed.Medium:\n            iAnimationSpeed = 50;\n            break;\n          case library.AnimationSpeed.Slow:\n            iAnimationSpeed = 150;\n            break;\n          case library.AnimationSpeed.None:\n          default:\n            iAnimationSpeed = 0;\n            break;\n        }\n\n        switch (sLineStyle) {\n          case library.LineStyle.Dashed:\n          case library.LineStyle.Dotted:\n            // calculate dash array\n            sDashArray = oSeries.getLineStyle() === 'dotted' ? '1 5' : '5';\n\n            // add css to svg definitions\n            oStrokeStyle = d3.select(`#${this.getId()} defs #${this.getId()}-dashdot-style-${oSeries.getKey()}`);\n            if (oStrokeStyle.empty()) {\n              oStrokeStyle = d3.select(`#${this.getId()} defs`).append('style').attr({\n                id: `${this.getId()}-dashdot-style-${oSeries.getKey()}`,\n                type: 'text/css'\n              });\n            }\n            // update svg pattern style\n            oStrokeStyle.text(`#${this.getId()} .c3-target-${oSeries.getKey()} .c3-shape {\n                                    stroke-dashoffset: ${oSeries.getLineAnimationForwards() ? '' : '-'}50rem;\n                                    stroke-dasharray: ${sDashArray};\n                                    stroke-linecap: round;\n\n                                    -webkit-animation: ui5-viz-chart-dash-animation ${iAnimationSpeed}s 0s linear infinite forwards;\n                                    -moz-animation: ui5-viz-chart-dash-animation ${iAnimationSpeed}s 0s linear infinite forwards;\n                                    -ms-animation: ui5-viz-chart-dash-animation ${iAnimationSpeed}s 0s linear infinite forwards;\n                                    -o-animation: ui5-viz-chart-dash-animation ${iAnimationSpeed}s 0s linear infinite forwards;\n                                    animation: ui5-viz-chart-dash-animation ${iAnimationSpeed}s 0s linear infinite forwards;\n                                }`);\n            break;\n          case library.LineStyle.Default:\n          default:\n            // remove pattern style from shape area\n            oStrokeStyle = d3.select(`#${this.getId()} defs #${this.getId()}-dashdot-style-${oSeries.getKey()}`);\n            if (!oStrokeStyle.empty()) {\n              oStrokeStyle.text('');\n            }\n            break;\n        }\n      });\n    },\n\n    /**\n     * Update chart line styles\n     *\n     * @private\n     */\n    _updateLineStyles() {\n      let sCSS = '',\n          oLineStyle = d3.select(`#${this.getId()} defs #${this.getId()}-line-style`);\n\n      // create style element if not exist\n      if (oLineStyle.empty()) {\n        oLineStyle = d3.select(`#${this.getId()} defs`).append('style').attr({\n          id: `${this.getId()}-line-style`,\n          type: 'text/css'\n        });\n      }\n\n      // get all chart lines  and concatenate color rules\n      this.getLines().forEach(oLine => {\n        let sColor = oLine.getColor();\n\n        if (sColor) {\n          // update svg area style\n          sCSS += `#${this.getId()} .${this.CSS_CLASS_LINE}-${oLine.getId()} line {\n                                stroke: ${sColor};\n                            }\n\n                            #${this.getId()} .${this.CSS_CLASS_LINE}-${oLine.getId()} circle {\n                                stroke: ${sColor};\n                            }\n\n                            #${this.getId()} .${this.CSS_CLASS_LINE}-${oLine.getId()} text {\n                                fill: ${sColor};\n                            }`;\n        }\n\n        // update line selector icon and selector press event\n        let oLineHook = d3.select(`#${this.getId()} .ui5-viz-chart-line-${oLine.getId()}`),\n            oIconInfo = sap.ui.core.IconPool.getIconInfo(oLine.getLineSelectorIcon());\n\n        if (oLine.getShowLineSelector()) {\n          // set icon of text element\n          oLineHook.select('.c3-grid-lines-circle-text').attr('font-family', oIconInfo.fontFamily).text(oIconInfo.content);\n\n          // set click event\n          oLineHook.select('.c3-grid-lines-circle-hover').on('click', function () {\n            oLine.fireSelectorPress({\n              line: oLine,\n              selectorDomRef: this.previousSibling // return circle instead of hover-circle\n            });\n          });\n        } else {\n          // unregister click event\n          oLineHook.select('.c3-grid-lines-circle-hover').on('click', function () {});\n        }\n      });\n\n      oLineStyle.text(sCSS);\n    },\n\n    /**\n     * Update chart line areas\n     *\n     * @private\n     */\n    _updateAreaStyles() {\n      let sCSS = '',\n          oAreaStyle = d3.select(`#${this.getId()} defs #${this.getId()}-area-style`);\n\n      // create style element if not exist\n      if (oAreaStyle.empty()) {\n        oAreaStyle = d3.select(`#${this.getId()} defs`).append('style').attr({\n          id: `${this.getId()}-area-style`,\n          type: 'text/css'\n        });\n      }\n\n      // get all chart areas and concatenate style rules\n      this.getAreas().forEach(oArea => {\n        let sColor = oArea.getColor() || '#000000',\n            sShapeStyle = oArea.getStyle(),\n            oPattern;\n\n        switch (sShapeStyle) {\n          case library.ShapeStyle.Striped:\n            // add pattern to svg definitions\n            oPattern = d3.select(`#${this.getId()} defs #${this.getId()}-area-stripe-pattern-${oArea.getId()}`);\n\n            if (oPattern.empty()) {\n              oPattern = d3.select(`#${this.getId()} defs`).append('pattern').attr({\n                id: `${this.getId()}-area-stripe-pattern-${oArea.getId()}`,\n                width: '8',\n                height: '8',\n                patternUnits: 'userSpaceOnUse',\n                class: `area-stripe-pattern-${oArea.getId()}`\n              }).append('path').attr({ d: 'M1,0L5,0L0,5L0,1L1,0 M8,1L8,5L5,8L1,8L8,1' });\n            }\n\n            // update svg area style\n            sCSS += `#${this.getId()} .area-stripe-pattern-${oArea.getId()} path {\n                                    fill: ${sColor};\n                                    stroke: none;\n                                }\n                                #${this.getId()} .${this.CSS_CLASS_AREA}-${oArea.getId()} rect.c3-region-stripe,\n                                #${this.getId()} .${this.CSS_CLASS_AREA}-${oArea.getId()} text.c3-region-text {\n                                    fill: ${sColor};\n                                }\n                                #${this.getId()} .${this.CSS_CLASS_AREA}-${oArea.getId()} rect.c3-region-area {\n                                    fill: url(#${this.getId()}-area-stripe-pattern-${oArea.getId()}) !important;\n                                }`;\n            break;\n\n          case library.ShapeStyle.Default:\n          default:\n            // update svg area style\n            sCSS += `#${this.getId()} .${this.CSS_CLASS_AREA}-${oArea.getId()} rect.c3-region-stripe,\n                                #${this.getId()} .${this.CSS_CLASS_AREA}-${oArea.getId()} text.c3-region-text {\n                                    fill: ${sColor};\n                                }\n                                #${this.getId()} .${this.CSS_CLASS_AREA}-${oArea.getId()} rect.c3-region-area {\n                                    fill: ${sColor};\n                                }`;\n            break;\n        }\n      });\n\n      oAreaStyle.text(sCSS);\n    },\n\n    /**\n     * Check if a style is valid for shapes\n     *\n     * @param sSeriesType {string} style to be validated\n     * @return {boolean} returns true if style is valid for shape tzpe\n     * @private\n     */\n    _isShapeType(sSeriesType) {\n      let bTypeValid = false;\n      switch (sSeriesType) {\n        case library.ChartSeriesType.Bar:\n          bTypeValid = true;\n          break;\n        default:\n          bTypeValid = false;\n          break;\n      }\n      return bTypeValid;\n    },\n\n    /**\n     * Check if a style is valid for lines\n     *\n     * @param sSeriesType {string} style to be validated\n     * @return {boolean} returns true if style is valid for shape tzpe\n     * @private\n     */\n    _isLineType(sSeriesType) {\n      let bTypeValid = false;\n      switch (sSeriesType) {\n        case library.ChartSeriesType.Line:\n        case library.ChartSeriesType.Spline:\n        case library.ChartSeriesType.Step:\n        case library.ChartSeriesType.AreaLine:\n        case library.ChartSeriesType.AreaSpline:\n        case library.ChartSeriesType.AreaStep:\n          bTypeValid = true;\n          break;\n        default:\n          bTypeValid = false;\n          break;\n      }\n      return bTypeValid;\n    },\n\n    /**\n     * Get available size in pixel of parent element.\n     *\n     * @param {string} [sSizeType] size type: 'width' or 'height'\n     * @return {number} Returns available size in pixel of parent element\n     * @private\n     */\n    _getAvailableSize(sSizeType) {\n      var iMargin = 0;\n\n      // fallback to 'width'\n      sSizeType = sSizeType === 'width' || sSizeType === 'height' ? sSizeType : 'width';\n\n      // get margin\n      if (this.getDomRef()) {\n        if (sSizeType === 'width') {\n          iMargin += parseInt(getComputedStyle(this.getDomRef(), '').marginLeft.match(/(\\d*(\\.\\d*)?)/, 10)[1]);\n          iMargin += parseInt(getComputedStyle(this.getDomRef(), '').marginRight.match(/(\\d*(\\.\\d*)?)/, 10)[1]);\n        } else {\n          iMargin += parseInt(getComputedStyle(this.getDomRef(), '').marginTop.match(/(\\d*(\\.\\d*)?)/, 10)[1]);\n          iMargin += parseInt(getComputedStyle(this.getDomRef(), '').marginBottom.match(/(\\d*(\\.\\d*)?)/, 10)[1]);\n        }\n      }\n\n      // get available width of parent element\n      return $(this._getParentDomRef())[sSizeType]() - iMargin;\n    },\n\n    /**\n     * Get computed CSS size in pixel.\n     *\n     * @param {sap.ui.core.CSSSize} [sCSSSize] Expects a sap.ui.core.CSSSize element\n     * @param {string} [sSizeType] Size type: 'width' or 'height'\n     * @return {number} Returns computed size in pixel based on CSS size\n     * @private\n     */\n    _getComputedSize(sCSSSize, sSizeType) {\n      sCSSSize = sCSSSize || 'auto';\n      sSizeType = sSizeType === 'width' || sSizeType === 'height' ? sSizeType : 'width';\n\n      // parse css value\n      var mCSS = library.parseCSSSize(sCSSSize),\n          iFraction = 1,\n          iCalculatedWidth;\n\n      switch (mCSS.unit) {\n        case 'rem':\n          // calculate pixel dependant on font size of root element\n          iCalculatedWidth = parseInt(getComputedStyle(document.body, '').fontSize.match(/(\\d*(\\.\\d*)?)/, 10)[1]);\n          break;\n        case 'em':\n          // calculate pixel dependant on font size of parent\n          iCalculatedWidth = parseInt(getComputedStyle(this._getParentDomRef(), '').fontSize.match(/(\\d*(\\.\\d*)?)/, 10)[1]);\n          break;\n        case 'px':\n          // if width value is negative or not supposed, then we take the full browser width\n          iCalculatedWidth = mCSS.value && mCSS.value > 0 ? mCSS.value : this._getAvailableSize(sSizeType);\n          break;\n        case 'vw':\n          // percentage value of viewport width\n          iFraction = (mCSS.value && mCSS.value > 0 ? mCSS.value : 100) / 100;\n          iCalculatedWidth = this._getAvailableSize('width') * iFraction;\n          break;\n        case 'vh':\n          // percentage value of viewport height\n          iFraction = (mCSS.value && mCSS.value > 0 ? mCSS.value : 100) / 100;\n          iCalculatedWidth = this._getAvailableSize('height') * iFraction;\n          break;\n        case '%':\n          // transform css value to fraction (50% >> 0.5)\n          iFraction = (mCSS.value && mCSS.value > 0 ? mCSS.value : 100) / 100;\n          iCalculatedWidth = this._getAvailableSize(sSizeType) * iFraction;\n          break;\n        // continue with 'auto:'\n        case 'initial':\n        // continue with 'auto:'\n        case 'inherit':\n        // continue with 'auto:'\n        case 'auto':\n          // continue with 'auto:'\n          iCalculatedWidth = this._getAvailableSize(sSizeType);\n          break;\n        default:\n          // not supported, yet: ch, ex, vmin, vmax, cm, mm, in, pc, pt, mozmm\n          // check: https://developer.mozilla.org/de/docs/Web/CSS/length#Interpolation\n          jQuery.sap.log.warning('CSS unit ' + mCSS.unit + ' is not supported, yet. Fallback to \"auto\" (max. width).');\n          iCalculatedWidth = this._getAvailableSize(sSizeType);\n          break;\n      }\n\n      return iCalculatedWidth;\n    },\n\n    /**\n     * Resize chart and update width and height.\n     *\n     * @return {ui5.viz.Chart} <code>this</code> to allow method chaining\n     * @private\n     */\n    _resize() {\n      if (this._chart) {\n        this._chart.resize({\n          width: this.getWidth(),\n          height: this.getHeigth()\n        });\n      }\n      return this;\n    },\n\n    /**\n     * Get parent DOM element of chart control.\n     *\n     * @return {DOM} Returns parent DOM element of chart control\n     * @private\n     */\n    _getParentDomRef() {\n      // try to return parent DOM element, else return document.body\n      var oParentNode = this.getDomRef() ? this.getDomRef().parentNode : document.body;\n      return oParentNode ? oParentNode : document.body;\n    }\n  });\n},\n/* bExport= */true);",
		"ui5/libs/viz/ChartArea.js": "/* @flow */\n\n/**\n * UI development toolkit enhancement for HTML5 (OpenUI5)\n * (c) Copyright 2016 PulseShift GmbH, all rights reserved.\n * Created by Jascha Quintern (fuchsvomwalde) on 28. Jul 2016.\n */\nsap.ui.define(['sap/ui/core/Control', './library'], function (Control, library) {\n  /**\n   * Constructor for a new <code>ui5.viz.ChartArea</code>.\n   *\n   * @param {string} [sId] Id for the new control, generated automatically if no id is given\n   * @param {object} [mSettings] Initial settings for the new control\n   *\n   * @class\n   * The <code>ChartArea</code> control: ChartArea container for bar, line and other chart types. Based on C3.js..\n   *\n   * @extends sap.ui.core.Control\n   *\n   * @author PulseShift GmbH\n   * @version 1.0.0\n   * @since: 1.0.0\n   *\n   * @constructor\n   * @public\n   * @alias ui5.viz.ChartArea\n   */\n  return Control.extend('ui5.viz.ChartArea', {\n    /* =========================================================== */\n    /* meta data definition                                        */\n    /* =========================================================== */\n\n    metadata: {\n      library: 'ui5.viz',\n      properties: {\n        /* === Appereance === */\n\n        /**\n         * Sets the ttitleext of the ChartArea\n         * @since: 1.0.0\n         */\n        title: { type: 'string', group: 'Appereance', defaultValue: null },\n\n        /**\n         * Sets the position of the title\n         * @since: ?\n         */\n        // titlePosition: { type: \"ui5.viz.ChartTitlePosition\", group: \"Appereance\", defaultValue: library.ChartTitlePosition.Start },\n\n        /**\n         * Sets the style of the shape\n         * @since: 1.0.0\n         */\n        style: {\n          type: 'ui5.viz.ShapeStyle',\n          group: 'Appearance',\n          defaultValue: library.ShapeStyle.Default\n        },\n\n        /**\n         * Sets a custom color for the area\n         * @since: 1.0.0\n         */\n        color: {\n          type: 'sap.ui.core.CSSColor',\n          group: 'Appearance',\n          defaultValue: null\n        },\n\n        /**\n         * Sets the referenced y axis the line value property is related to\n         * @since: 1.0.0\n         */\n        axis: {\n          type: 'ui5.viz.Axis',\n          group: 'Appearance',\n          defaultValue: library.Axis.X\n        },\n\n        /* === Data === */\n\n        /**\n         * Sets value that is matching a start position on the assigned axis\n         * @since: 1.0.0\n         */\n        startValue: { type: 'string', group: 'Data', defaultValue: null },\n\n        /**\n         * Sets value that is matching a end position on the assigned axis\n         * @since: 1.0.0\n         */\n        endValue: { type: 'string', group: 'Data', defaultValue: null }\n      },\n      aggregations: {},\n      associations: {},\n      events: {\n        /**\n         * Line was updated\n         */\n        areaUpdate: {\n          parameters: {\n            /**\n             * Chart update event code.\n             */\n            code: { type: 'ui5.viz.ChartUpdateCode' }\n          }\n        }\n      }\n    },\n\n    /* =========================================================== */\n    /* private attributes                                          */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* constants                                                   */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* lifecycle methods                                           */\n    /* =========================================================== */\n\n    /**\n     * The init() method can be used to set up, for example, internal variables or subcontrols of a composite control.\n     * If the init() method is implemented, SAPUI5 invokes the method for each control instance directly after the constructor method.\n     * @private\n     * @override\n     */\n    init() {},\n\n    /**\n     * Constructor for a new <code>ui5.viz.Chart</code>.\n     *\n     * @param {string} [sId] Id for the new control, generated automatically if no id is given\n     * @param {object} [mSettings] Initial settings for the new control\n     */\n    constructor() {\n      Control.prototype.constructor.apply(this, arguments);\n    },\n\n    /**\n     * Method called before control gets rendered\n     * @private\n     * @override\n     */\n    onBeforeRendering() {},\n\n    /**\n     * Renderer function of control <code>ui5.viz.Chart</code>.\n     *\n     * @param {object} [oRm] Render Manager\n     * @param {object} [oControl] Current control (this)\n     */\n    renderer(oRm, oControl) {},\n\n    /**\n     * Method called after control gets rendered\n     * @private\n     * @override\n     */\n    onAfterRendering() {},\n\n    /**\n     * The exit() method is used to clean up resources and to deregister event handlers.\n     * If the exit() method is implemented, SAPUI5 core invokes the method for each control instance when it is destroyed.\n     * @private\n     * @override\n     */\n    exit() {\n      // inform observers about control destroy\n      this.fireAreaUpdate({\n        code: library.ChartUpdateCode.Area\n      });\n    },\n\n    /* =========================================================== */\n    /* override methods                                            */\n    /* =========================================================== */\n\n    /**\n     * Overwrites the method in order to check on supported properties.\n     *\n     * @param sName {string} Property name to be set\n     * @param vValue {boolean | string | object} Property value to be set\n     * @param bSuppressInvalidation {boolean} Whether invalidation to be suppressed\n     * @return {ui5.viz.ChartDataPoint} This instance for chaining\n     * @public\n     */\n    setProperty(sName, vValue, bSuppressInvalidation) {\n      if (['style', 'color', 'axis', 'title', 'startValue', 'endValue', 'visible'].includes(sName)) {\n        // important: update value, before fire event\n        Control.prototype.setProperty.call(this, sName, vValue, true);\n\n        // inform observers about control destroy\n        this.fireAreaUpdate({\n          code: library.ChartUpdateCode.Area\n        });\n      } else {\n        Control.prototype.setProperty.call(this, sName, vValue, bSuppressInvalidation);\n      }\n\n      return this;\n    }\n\n    /* =========================================================== */\n    /* public methods                                              */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* private methods                                             */\n    /* =========================================================== */\n  });\n},\n/* bExport= */true);",
		"ui5/libs/viz/ChartAxis.js": "/* @flow */\n\n/**\n * UI development toolkit enhancement for HTML5 (OpenUI5)\n * (c) Copyright 2016 PulseShift GmbH, all rights reserved.\n * Created by Jascha Quintern (fuchsvomwalde) on 28. Jul 2016.\n */\nsap.ui.define(['sap/ui/core/Control', './library'], function (Control, library) {\n  /**\n   * Constructor for a new <code>ui5.viz.ChartAxis</code>.\n   *\n   * @param {string} [sId] Id for the new control, generated automatically if no id is given\n   * @param {object} [mSettings] Initial settings for the new control\n   *\n   * @class\n   * The <code>ChartAxis</code> control: ChartAxis container for bar, line and other chart types. Based on C3.js..\n   *\n   * @extends sap.ui.core.Control\n   *\n   * @author PulseShift GmbH\n   * @version 1.0.0\n   * @since: 1.0.0\n   *\n   * @constructor\n   * @public\n   * @alias ui5.viz.ChartAxis\n   */\n  return Control.extend('ui5.viz.ChartAxis', {\n    /* =========================================================== */\n    /* meta data definition                                        */\n    /* =========================================================== */\n\n    metadata: {\n      library: 'ui5.viz',\n      properties: {\n        /* === Appereance === */\n\n        /**\n         * Sets axis title\n         * @since: 1.0.0\n         */\n        title: { type: 'string', group: 'Appereance', defaultValue: null },\n\n        /**\n         * Sets the posotion of the title\n         * @since: ?\n         */\n        // titlePosition: { type: 'ui5.viz.AxisTitlePosition', group: 'Appereance', defaultValue: 'library.AxisTitlePosition.Default' },\n\n        /**\n         * Sets axis title visibility\n         * @since: 1.0.0\n         */\n        showTitle: {\n          type: 'boolean',\n          group: 'Appereance',\n          defaultValue: true\n        },\n\n        /**\n         * Sets the grid lines style\n         * @since: ?\n         */\n        // gridLinesStyle: { type: 'ui5.viz.LineStyle', group: 'Appereance', defaultValue: 'library.LineStyle.Default' },\n\n        /**\n         * Sets visibility of grid lines\n         * Hint: live update by c3 API is not supported, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        showGridLines: {\n          type: 'boolean',\n          group: 'Appereance',\n          defaultValue: false\n        },\n\n        /**\n         * Sets the minimal value of the axis.\n         * @since: 1.0.0\n         */\n        minValue: { type: 'string', group: 'Appereance', defaultValue: null },\n\n        /**\n         * Sets the maximal value of the axis.\n         * @since: 1.0.0\n         */\n        maxValue: { type: 'string', group: 'Appereance', defaultValue: null },\n\n        /**\n         * Sets the axis type\n         * @since: 1.0.0\n         */\n        _axisType: {\n          type: 'ui5.viz.Axis',\n          group: 'Data',\n          hidden: true,\n          defaultValue: library.Axis.X\n        }\n      },\n      aggregations: {\n        /**\n         * Sets the labels displayed on the axis\n         * Hint: live update by c3 API is only supported for X axis, yet, therefore we must rerender the chart\n         * @since: 1.0.0\n         */\n        labels: { type: 'ui5.viz.ChartAxisLabel', multiple: true }\n      },\n      defaultAggregation: 'labels',\n      associations: {},\n      events: {\n        /**\n         * Axis was updated\n         */\n        axisUpdate: {}\n      }\n    },\n\n    /* =========================================================== */\n    /* private attributes                                          */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* constants                                                   */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* lifecycle methods                                           */\n    /* =========================================================== */\n\n    /**\n     * The init() method can be used to set up, for example, internal variables or subcontrols of a composite control.\n     * If the init() method is implemented, SAPUI5 invokes the method for each control instance directly after the constructor method.\n     * @private\n     * @override\n     */\n    init() {},\n\n    /**\n     * Constructor for a new <code>ui5.viz.Chart</code>.\n     *\n     * @param {string} [sId] Id for the new control, generated automatically if no id is given\n     * @param {object} [mSettings] Initial settings for the new control\n     */\n    constructor() {\n      Control.prototype.constructor.apply(this, arguments);\n    },\n\n    /**\n     * Method called before control gets rendered\n     * @private\n     * @override\n     */\n    onBeforeRendering() {},\n\n    /**\n     * Renderer function of control <code>ui5.viz.Chart</code>.\n     *\n     * @param {object} [oRm] Render Manager\n     * @param {object} [oControl] Current control (this)\n     */\n    renderer(oRm, oControl) {},\n\n    /**\n     * Method called after control gets rendered\n     * @private\n     * @override\n     */\n    onAfterRendering() {},\n\n    /**\n     * The exit() method is used to clean up resources and to deregister event handlers.\n     * If the exit() method is implemented, SAPUI5 core invokes the method for each control instance when it is destroyed.\n     * @private\n     * @override\n     */\n    exit() {\n      // inform observers about control destroy\n      this.fireAxisUpdate();\n    },\n\n    /* =========================================================== */\n    /* override methods                                            */\n    /* =========================================================== */\n\n    /**\n     * Inserts managed object oObject to the aggregation named sAggregationName at position iIndex.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param oObject {sap.ui.base.ManagedObject} the ManagedObject to add; if empty, nothing is inserted.\n     * @param iIndex {int} the 0-based index the managed object should be inserted at; for a negative value iIndex, oObject is inserted at position 0; for a value greater than the current size of the aggregation, oObject is inserted at the last position\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    insertAggregation(sAggregationName, oObject, iIndex, bSuppressInvalidate) {\n      // only fire axis update if axis type is X axis\n      if (sAggregationName === 'labels' && this.getProperty('_axisType') === library.Axis.X) {\n        // important: update value, before fire event\n        Control.prototype.insertAggregation.call(this, sAggregationName, oObject, true);\n\n        // forward labelsUpdate event\n        oObject.attachAxisLabelUpdate(this.fireAxisUpdate.bind(this));\n\n        // inform observers about labels update\n        this.fireAxisUpdate();\n      } else {\n        Control.prototype.insertAggregation.call(this, sAggregationName, oObject, iIndex, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Adds some entity oObject to the aggregation identified by sAggregationName.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param oObject {sap.ui.base.ManagedObject} the ManagedObject to add; if empty, nothing is inserted.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    addAggregation(sAggregationName, oObject, bSuppressInvalidate) {\n      // only fire axis update if axis type is X axis\n      if (sAggregationName === 'labels' && this.getProperty('_axisType') === library.Axis.X) {\n        // important: update value, before fire event\n        Control.prototype.addAggregation.call(this, sAggregationName, oObject, true);\n\n        // forward labelsUpdate event\n        oObject.attachAxisLabelUpdate(this.fireAxisUpdate.bind(this));\n\n        // inform observers about labels update\n        this.fireAxisUpdate();\n      } else {\n        Control.prototype.addAggregation.call(this, sAggregationName, oObject, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes an object from the aggregation named sAggregationName with cardinality 0..n.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param oObject {sap.ui.base.ManagedObject} the ManagedObject to add; if empty, nothing is inserted.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    removeAggregation(sAggregationName, oObject, bSuppressInvalidate) {\n      // only fire axis update if axis type is X axis\n      if (sAggregationName === 'labels' && this.getProperty('_axisType') === library.Axis.X) {\n        // important: update value, before fire event\n        Control.prototype.removeAggregation.call(this, sAggregationName, oObject, true);\n\n        // forward labelsUpdate event\n        oObject.attachAxisLabelUpdate(this.fireAxisUpdate.bind(this));\n\n        // inform observers about labels update\n        this.fireAxisUpdate();\n      } else {\n        Control.prototype.removeAggregation.call(this, sAggregationName, oObject, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes all objects from the 0..n-aggregation named sAggregationName.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    removeAllAggregation(sAggregationName, bSuppressInvalidate) {\n      // only fire axis update if axis type is X axis\n      if (sAggregationName === 'labels' && this.getProperty('_axisType') === library.Axis.X) {\n        // important: update value, before fire event\n        Control.prototype.removeAllAggregation.call(this, sAggregationName, true);\n\n        // inform observers about labels update\n        this.fireAxisUpdate();\n      } else {\n        Control.prototype.removeAllAggregation.call(this, sAggregationName, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Destroys (all) the managed object(s) in the aggregation named sAggregationName and empties the aggregation. If the aggregation did contain any object, this ManagedObject is marked as changed.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    destroyAggregation(sAggregationName, bSuppressInvalidate) {\n      // only fire axis update if axis type is X axis\n      if (sAggregationName === 'labels' && this.getProperty('_axisType') === library.Axis.X) {\n        // important: update value, before fire event\n        Control.prototype.destroyAggregation.call(this, sAggregationName, true);\n\n        // inform observers about labels update\n        this.fireAxisUpdate();\n      } else {\n        Control.prototype.destroyAggregation.call(this, sAggregationName, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Overwrites the method in order to check on supported properties.\n     *\n     * @param {string} [sName] Property name to be set\n     * @param {any} [vValue] Property value to be set\n     * @param {boolean} [bSuppressInvalidation] Whether invalidation to be suppressed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    setProperty(sName, vValue, bSuppressInvalidation) {\n      // TODO: Check why change of 'minValue' or 'maxValue' are not working without rerender (simple examples are working)\n      if (['title', 'showTitle', 'visible'].includes(sName)) {\n        // important: update value, before fire event\n        Control.prototype.setProperty.call(this, sName, vValue, true); // do not rerender\n\n        // inform observers about data update\n        this.fireAxisUpdate();\n      } else {\n        Control.prototype.setProperty.call(this, sName, vValue, bSuppressInvalidation);\n      }\n\n      return this;\n    }\n\n    /* =========================================================== */\n    /* public methods                                              */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* private methods                                             */\n    /* =========================================================== */\n  });\n},\n/* bExport= */true);",
		"ui5/libs/viz/ChartAxisLabel.js": "/* @flow */\n\n/**\n * UI development toolkit enhancement for HTML5 (OpenUI5)\n * (c) Copyright 2016 PulseShift GmbH, all rights reserved.\n * Created by Jascha Quintern (fuchsvomwalde) on 28. Jul 2016.\n */\nsap.ui.define(['sap/ui/core/Control', './library'], function (Control, library) {\n  /**\n   * Constructor for a new <code>ui5.viz.ChartAxisLabel</code>.\n   *\n   * @param {string} [sId] Id for the new control, generated automatically if no id is given\n   * @param {object} [mSettings] Initial settings for the new control\n   *\n   * @class\n   * The <code>ChartAxisLabel</code> control: ChartAxisLabel container for bar, line and other chart types. Based on C3.js..\n   *\n   * @extends sap.ui.core.Control\n   *\n   * @author PulseShift GmbH\n   * @version 1.0.0\n   * @since: 1.0.0\n   *\n   * @constructor\n   * @public\n   * @alias ui5.viz.ChartAxisLabel\n   */\n  return Control.extend('ui5.viz.ChartAxisLabel', {\n    /* =========================================================== */\n    /* meta data definition                                        */\n    /* =========================================================== */\n\n    metadata: {\n      library: 'ui5.viz',\n      properties: {\n        /* === Appereance === */\n\n        /**\n         * Sets axis value\n         * @since: 1.0.0\n         */\n        value: { type: 'any', group: 'Appereance', defaultValue: null },\n\n        /**\n         * Sets axis label title\n         * @since: 1.0.0\n         */\n        title: { type: 'string', group: 'Appereance', defaultValue: null\n\n          /**\n           * Sets axis label icon\n           * @since: ?\n           */\n          // icon: { type: \"sap.ui.core.URI\", group: \"Appereance\", defaultValue: false }\n        } },\n      aggregations: {},\n      associations: {},\n      events: {\n        /**\n         * Data was updated\n         */\n        axisLabelUpdate: {}\n      }\n    },\n\n    /* =========================================================== */\n    /* private attributes                                          */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* constants                                                   */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* lifecycle methods                                           */\n    /* =========================================================== */\n\n    /**\n     * The init() method can be used to set up, for example, internal variables or subcontrols of a composite control.\n     * If the init() method is implemented, SAPUI5 invokes the method for each control instance directly after the constructor method.\n     * @private\n     * @override\n     */\n    init() {},\n\n    /**\n     * Constructor for a new <code>ui5.viz.Chart</code>.\n     *\n     * @param {string} [sId] Id for the new control, generated automatically if no id is given\n     * @param {object} [mSettings] Initial settings for the new control\n     */\n    constructor() {\n      Control.prototype.constructor.apply(this, arguments);\n    },\n\n    /**\n     * Method called before control gets rendered\n     * @private\n     * @override\n     */\n    onBeforeRendering() {},\n\n    /**\n     * Renderer function of control <code>ui5.viz.Chart</code>.\n     *\n     * @param {object} [oRm] Render Manager\n     * @param {object} [oControl] Current control (this)\n     */\n    renderer(oRm, oControl) {},\n\n    /**\n     * Method called after control gets rendered\n     * @private\n     * @override\n     */\n    onAfterRendering() {},\n\n    /**\n     * The exit() method is used to clean up resources and to deregister event handlers.\n     * If the exit() method is implemented, SAPUI5 core invokes the method for each control instance when it is destroyed.\n     * @private\n     * @override\n     */\n    exit() {\n      // inform observers about control destroy\n      this.fireAxisLabelUpdate();\n    },\n\n    /* =========================================================== */\n    /* override methods                                            */\n    /* =========================================================== */\n\n    /**\n     * Overwrites the method in order to check on supported properties.\n     *\n     * @param sName {string} Property name to be set\n     * @param vValue {boolean | string | object} Property value to be set\n     * @param bSuppressInvalidation {boolean} Whether invalidation to be suppressed\n     * @return {ui5.viz.ChartDataPoint} This instance for chaining\n     * @public\n     */\n    setProperty(sName, vValue, bSuppressInvalidation) {\n      // to be compatible with chart type category, we must convert all values to string\n      if (sName === 'value' && vValue !== null && vValue !== undefined) {\n        vValue = vValue.toString();\n      }\n\n      if (['value', 'title', 'visible'].includes(sName)) {\n        // important: update value, before fire event\n        Control.prototype.setProperty.call(this, sName, vValue, true);\n\n        // inform observers about data update\n        this.fireAxisLabelUpdate();\n      } else {\n        Control.prototype.setProperty.call(this, sName, vValue, bSuppressInvalidation);\n      }\n\n      return this;\n    }\n\n    /* =========================================================== */\n    /* public methods                                              */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* private methods                                             */\n    /* =========================================================== */\n  });\n},\n/* bExport= */true);",
		"ui5/libs/viz/ChartDataPoint.js": "/* @flow */\n\n/**\n * UI development toolkit enhancement for HTML5 (OpenUI5)\n * (c) Copyright 2016 PulseShift GmbH, all rights reserved.\n * Created by Jascha Quintern (fuchsvomwalde) on 20. Jul 2016.\n */\nsap.ui.define(['sap/ui/core/Control', './library'], function (Control, library) {\n  /**\n   * Constructor for a new <code>ui5.viz.ChartDataPoint</code>.\n   *\n   * @param {string} [sId] Id for the new control, generated automatically if no id is given\n   * @param {object} [mSettings] Initial settings for the new control\n   *\n   * @class\n   * The <code>ChartDataPoint</code> control: ChartDataPoint container for bar, line and other chart types. Based on C3.js..\n   *\n   * @extends sap.ui.core.Control\n   *\n   * @author PulseShift GmbH\n   * @version 1.0.0\n   * @since: 1.0.0\n   *\n   * @constructor\n   * @public\n   * @alias ui5.viz.ChartDataPoint\n       */\n  return Control.extend('ui5.viz.ChartDataPoint', {\n    /* =========================================================== */\n    /* meta data definition                                        */\n    /* =========================================================== */\n\n    metadata: {\n      library: 'ui5.viz',\n      properties: {\n        /* === Appearance === */\n\n        /**\n         * Sets the representation of value as formatted text\n         * Hint: Not available for chart types Bar, Step and AreaStep, yet.\n         * @since: 1.0.0\n         */\n        highlightAnimation: {\n          type: 'ui5.viz.DataPointAnimation',\n          group: 'Appearance',\n          defaultValue: library.DataPointAnimation.None\n        },\n\n        /* === Data === */\n\n        /**\n         * Sets the representation of value as formatted text\n         * @since: 1.0.0\n         */\n        label: { type: 'string', group: 'Data', defaultValue: null },\n\n        /**\n         * Sets the value the data point should represent\n         * Hint: To support null as value, the type must be \"any\"\n         * @since: 1.0.0\n         */\n        value: { type: 'any', group: 'Data', defaultValue: null }\n      },\n      aggregations: {},\n      associations: {},\n      events: {\n        /**\n         * Data was updated\n         */\n        dataPointUpdate: {}\n      }\n    },\n\n    /* =========================================================== */\n    /* private attributes                                          */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* constants                                                   */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* lifecycle methods                                           */\n    /* =========================================================== */\n\n    /**\n     * The init() method can be used to set up, for example, internal variables or subcontrols of a composite control.\n     * If the init() method is implemented, SAPUI5 invokes the method for each control instance directly after the constructor method.\n     * @private\n     * @override\n     */\n    init() {},\n\n    /**\n     * Constructor for a new <code>ui5.viz.Chart</code>.\n     *\n     * @param {string} [sId] Id for the new control, generated automatically if no id is given\n     * @param {object} [mSettings] Initial settings for the new control\n     */\n    constructor() {\n      Control.prototype.constructor.apply(this, arguments);\n    },\n\n    /**\n     * Method called before control gets rendered\n     * @private\n     * @override\n     */\n    onBeforeRendering() {},\n\n    /**\n     * Renderer function of control <code>ui5.viz.Chart</code>.\n     *\n     * @param {object} [oRm] Render Manager\n     * @param {object} [oControl] Current control (this)\n     */\n    renderer(oRm, oControl) {},\n\n    /**\n     * Method called after control gets rendered\n     * @private\n     * @override\n     */\n    onAfterRendering() {},\n\n    /**\n     * The exit() method is used to clean up resources and to deregister event handlers.\n     * If the exit() method is implemented, SAPUI5 core invokes the method for each control instance when it is destroyed.\n     * @private\n     * @override\n     */\n    exit() {\n      // inform observers about control destroy\n      this.fireDataPointUpdate();\n    },\n\n    /* =========================================================== */\n    /* override methods                                            */\n    /* =========================================================== */\n\n    /**\n     * Overwrites the method in order to check on supported properties.\n     *\n     * @param sName {string} Property name to be set\n     * @param vValue {boolean | string | object} Property value to be set\n     * @param bSuppressInvalidation {boolean} Whether invalidation to be suppressed\n     * @return {ui5.viz.ChartDataPoint} This instance for chaining\n     * @public\n     */\n    setProperty(sName, vValue, bSuppressInvalidation) {\n      if (['value', 'label', 'visible', 'highlightAnimation'].includes(sName)) {\n        // important: update value, before fire event\n        Control.prototype.setProperty.call(this, sName, vValue, true);\n\n        // inform observers about data update\n        this.fireDataPointUpdate();\n      } else {\n        Control.prototype.setProperty.call(this, sName, vValue, bSuppressInvalidation);\n      }\n\n      return this;\n    }\n\n    /* =========================================================== */\n    /* public methods                                              */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* private methods                                             */\n    /* =========================================================== */\n  });\n},\n/* bExport= */true);",
		"ui5/libs/viz/ChartLine.js": "/* @flow */\n\n/**\n * UI development toolkit enhancement for HTML5 (OpenUI5)\n * (c) Copyright 2016 PulseShift GmbH, all rights reserved.\n * Created by Jascha Quintern (fuchsvomwalde) on 28. Jul 2016.\n */\nsap.ui.define(['sap/ui/core/Control', './library'], function (Control, library) {\n  'use strict';\n\n  /**\n   * Constructor for a new <code>ui5.viz.ChartLine</code>.\n   *\n   * @param {string} [sId] Id for the new control, generated automatically if no id is given\n   * @param {object} [mSettings] Initial settings for the new control\n   *\n   * @class\n   * The <code>ChartLine</code> control: ChartLine container for bar, line and other chart types. Based on C3.js..\n   *\n   * @extends sap.ui.core.Control\n   *\n   * @author PulseShift GmbH\n   * @version 1.0.0\n   * @since: 1.0.0\n   *\n   * @constructor\n   * @public\n   * @alias ui5.viz.ChartLine\n   */\n\n  return Control.extend('ui5.viz.ChartLine', {\n    /* =========================================================== */\n    /* meta data definition                                        */\n    /* =========================================================== */\n\n    metadata: {\n      library: 'ui5.viz',\n      properties: {\n        /* === Appereance === */\n\n        /**\n         * Sets the ttitleext of the ChartLine\n         * @since: 1.0.0\n         */\n        title: { type: 'string', group: 'Appereance', defaultValue: null },\n\n        /**\n         * Sets the position of the title\n         * @since: 1.0.0\n         */\n        titlePosition: {\n          type: 'ui5.viz.ChartTitlePosition',\n          group: 'Appereance',\n          defaultValue: library.ChartTitlePosition.Start\n        },\n\n        /**\n         * Sets the style of the line\n         * @since: 1.0.0\n         */\n        style: {\n          type: 'ui5.viz.LineStyle',\n          group: 'Appearance',\n          defaultValue: library.LineStyle.Default\n        },\n\n        /**\n         * Sets a custom color for the line\n         * @since: 1.0.0\n         */\n        color: {\n          type: 'sap.ui.core.CSSColor',\n          group: 'Appearance',\n          defaultValue: null\n        },\n\n        /**\n         * Sets the referenced y axis the line value property is related to\n         * @since: 1.0.0\n         */\n        axis: {\n          type: 'ui5.viz.Axis',\n          group: 'Appearance',\n          defaultValue: library.Axis.Y\n        },\n\n        /**\n         * Sets the visibility of a line selector.\n         * @since: 1.0.0\n         */\n        showLineSelector: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: false\n        },\n\n        /**\n         * Sets if only icon or icon with circle should be displayed.\n         * @since: 1.0.0\n         */\n        selectorIconOnly: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: false\n        },\n\n        /**\n         * Sets the the icon for the line selector.\n         * @since: 1.0.0\n         */\n        lineSelectorIcon: {\n          type: 'sap.ui.core.URI',\n          group: 'Appearance',\n          defaultValue: 'sap-icon://flag'\n        },\n\n        /* === Data === */\n\n        /**\n         * Sets value that is matching a position on the assigned axis\n         * @since: 1.0.0\n         */\n        value: { type: 'string', group: 'Data', defaultValue: null }\n      },\n      aggregations: {},\n      associations: {},\n      events: {\n        /**\n         * Line was updated\n         */\n        lineUpdate: {\n          parameters: {\n            /**\n             * Chart update event code.\n             */\n            code: { type: 'ui5.viz.ChartUpdateCode' }\n          }\n        },\n\n        /**\n         * Line selector was pressed\n         */\n        selectorPress: {\n          parameters: {\n            /**\n             * Chart line that was clicked.\n             */\n            line: { type: 'ui5.viz.ChartLine' },\n\n            /**\n             * Dom reference of line selector.\n             */\n            selectorDomRef: { type: 'object' }\n          }\n        }\n      }\n    },\n\n    /* =========================================================== */\n    /* private attributes                                          */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* constants                                                   */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* lifecycle methods                                           */\n    /* =========================================================== */\n\n    /**\n     * The init() method can be used to set up, for example, internal variables or subcontrols of a composite control.\n     * If the init() method is implemented, SAPUI5 invokes the method for each control instance directly after the constructor method.\n     * @private\n     * @override\n     */\n    init() {},\n\n    /**\n     * Constructor for a new <code>ui5.viz.Chart</code>.\n     *\n     * @param {string} [sId] Id for the new control, generated automatically if no id is given\n     * @param {object} [mSettings] Initial settings for the new control\n     */\n    constructor() {\n      Control.prototype.constructor.apply(this, arguments);\n    },\n\n    /**\n     * Method called before control gets rendered\n     * @private\n     * @override\n     */\n    onBeforeRendering() {},\n\n    /**\n     * Renderer function of control <code>ui5.viz.Chart</code>.\n     *\n     * @param {object} [oRm] Render Manager\n     * @param {object} [oControl] Current control (this)\n     */\n    renderer(oRm, oControl) {},\n\n    /**\n     * Method called after control gets rendered\n     * @private\n     * @override\n     */\n    onAfterRendering() {},\n\n    /**\n     * The exit() method is used to clean up resources and to deregister event handlers.\n     * If the exit() method is implemented, SAPUI5 core invokes the method for each control instance when it is destroyed.\n     * @private\n     * @override\n     */\n    exit() {\n      // inform observers about control destroy\n      this.fireLineUpdate({\n        code: library.ChartUpdateCode.Line\n      });\n    },\n\n    /* =========================================================== */\n    /* override methods                                            */\n    /* =========================================================== */\n\n    /**\n     * Overwrites the method in order to check on supported properties.\n     *\n     * @param sName {string} Property name to be set\n     * @param vValue {boolean | string | object} Property value to be set\n     * @param bSuppressInvalidation {boolean} Whether invalidation to be suppressed\n     * @return {ui5.viz.ChartDataPoint} This instance for chaining\n     * @public\n     */\n    setProperty(sName, vValue, bSuppressInvalidation) {\n      if (['title', 'titlePosition', 'style', 'color', 'axis', 'value', 'visible'].includes(sName)) {\n        // important: update value, before fire event\n        Control.prototype.setProperty.call(this, sName, vValue, true);\n\n        // inform observers about data update\n        this.fireLineUpdate({\n          code: library.ChartUpdateCode.Line\n        });\n      } else {\n        Control.prototype.setProperty.call(this, sName, vValue, bSuppressInvalidation);\n      }\n\n      return this;\n    }\n\n    /* =========================================================== */\n    /* public methods                                              */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* private methods                                             */\n    /* =========================================================== */\n  });\n},\n/* bExport= */true);",
		"ui5/libs/viz/ChartSeries.js": "/* @flow */\n\n/**\n * UI development toolkit enhancement for HTML5 (OpenUI5)\n * (c) Copyright 2016 PulseShift GmbH, all rights reserved.\n * Created by Jascha Quintern (fuchsvomwalde) on 20. Jul 2016.\n */\nsap.ui.define(['sap/ui/core/Control', './library'], function (Control, library) {\n  /**\n   * Constructor for a new <code>ui5.viz.ChartSeries</code>.\n   *\n   * @param {string} [sId] Id for the new control, generated automatically if no id is given\n   * @param {object} [mSettings] Initial settings for the new control\n   *\n   * @class\n   * The <code>ChartSeries</code> control: ChartSeries container for bar, line and other chart types. Based on C3.js..\n   *\n   * @extends sap.ui.core.Control\n   *\n   * @author PulseShift GmbH\n   * @version 1.0.0\n   * @since: 1.0.0\n   *\n   * @constructor\n   * @public\n   * @alias ui5.viz.ChartSeries\n   */\n  return Control.extend('ui5.viz.ChartSeries', {\n    /* =========================================================== */\n    /* meta data definition                                        */\n    /* =========================================================== */\n\n    metadata: {\n      library: 'ui5.viz',\n      properties: {\n        /* === Appearance === */\n\n        /**\n         * Shows or hides series and legend\n         * @since: 1.0.0\n         */\n        type: {\n          type: 'ui5.viz.ChartSeriesType',\n          group: 'Appearance',\n          defaultValue: library.ChartSeriesType.Spline\n        },\n\n        /**\n         * Name of the series\n         * @since: 1.0.0\n         */\n        name: { type: 'string', group: 'Appearance', defaultValue: null },\n\n        /**\n         * Sets a custom color for the series, overwriting the default color palette\n         * @since: 1.0.0\n         */\n        color: {\n          type: 'sap.ui.core.CSSColor',\n          group: 'Appearance',\n          defaultValue: null\n        },\n\n        /**\n         * Sets visibility of labels\n         * @since: 1.0.0\n         */\n        showLabels: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: false\n        },\n\n        /**\n         * Sets style of series lines (supported types: line, spline, step, area, area-spline, area-step)\n         * @since: 1.0.0\n         */\n        lineStyle: {\n          type: 'ui5.viz.LineStyle',\n          group: 'Appearance',\n          defaultValue: library.LineStyle.Default\n        },\n\n        /**\n         * Sets style of series shape (supported types: bar)\n         * @since: 1.0.0\n         */\n        shapeStyle: {\n          type: 'ui5.viz.ShapeStyle',\n          group: 'Appearance',\n          defaultValue: library.ShapeStyle.Default\n        },\n\n        /**\n         * Sets speed of animated dashes / dots (none, slow, medium, fast)\n         * @since: 1.0.0\n         */\n        lineAnimationSpeed: {\n          type: 'ui5.viz.AnimationSpeed',\n          group: 'Appearance',\n          defaultValue: library.AnimationSpeed.None\n        },\n\n        /**\n         * Sets if line animation should run forwards or backwards\n         * @since: 1.0.0\n         */\n        lineAnimationForwards: {\n          type: 'boolean',\n          group: 'Appearance',\n          defaultValue: true\n        },\n\n        /**\n         * ChartSeries with the same group key are displayed as a cluster (e.g. stacked bar)\n         * @since: 1.0.0\n         */\n        groupKey: { type: 'string', group: 'Appearance', defaultValue: null },\n\n        /**\n         * Sets the referenced y axis the ChartSeriesData value property is related to\n         * @since: 1.0.0\n         */\n        yAxis: {\n          type: 'ui5.viz.Axis',\n          group: 'Appearance',\n          defaultValue: library.Axis.Y\n        },\n\n        /* === Data === */\n\n        /**\n         * Unique key for the series\n         * @since: 1.0.0\n         */\n        key: { type: 'string', group: 'Data', defaultValue: null }\n      },\n      aggregations: {\n        /**\n         * Defines the data points of our series\n         * @since: 1.0.0\n         */\n        data: { type: 'ui5.viz.ChartDataPoint', multiple: true }\n      },\n      defaultAggregation: 'data',\n      associations: {},\n      events: {\n        /**\n         * Series was updated\n         */\n        seriesDataUpdate: {\n          parameters: {\n            /**\n             * Chart update event code.\n             */\n            code: { type: 'ui5.viz.ChartUpdateCode' }\n          }\n        },\n\n        /**\n         * Series visibility have changed\n         */\n        seriesVisibilityChange: {\n          parameters: {\n            /**\n             * Reference to respective series.\n             */\n            chartSeries: { type: 'ui5.viz.ChartSeries' }\n          }\n        }\n      }\n    },\n\n    /* =========================================================== */\n    /* private attributes                                          */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* constants                                                   */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* lifecycle methods                                           */\n    /* =========================================================== */\n\n    /**\n     * The init() method can be used to set up, for example, internal variables or subcontrols of a composite control.\n     * If the init() method is implemented, SAPUI5 invokes the method for each control instance directly after the constructor method.\n     * @private\n     * @override\n     */\n    init() {},\n\n    /**\n     * Constructor for a new <code>ui5.viz.Chart</code>.\n     *\n     * @param {string} [sId] Id for the new control, generated automatically if no id is given\n     * @param {object} [mSettings] Initial settings for the new control\n     */\n    constructor() {\n      Control.prototype.constructor.apply(this, arguments);\n    },\n\n    /**\n     * Method called before control gets rendered\n     * @private\n     * @override\n     */\n    onBeforeRendering() {},\n\n    /**\n     * Renderer function of control <code>ui5.viz.Chart</code>.\n     *\n     * @param {object} [oRm] Render Manager\n     * @param {object} [oControl] Current control (this)\n     */\n    // renderer(oRm, oControl) {},\n\n    /**\n     * Method called after control gets rendered\n     * @private\n     * @override\n     */\n    onAfterRendering() {},\n\n    /**\n     * The exit() method is used to clean up resources and to deregister event handlers.\n     * If the exit() method is implemented, SAPUI5 core invokes the method for each control instance when it is destroyed.\n     * @private\n     * @override\n     */\n    exit() {\n      // inform observers about control destroy\n      this.fireSeriesDataUpdate({\n        code: library.ChartUpdateCode.DataPoint\n      });\n    },\n\n    /* =========================================================== */\n    /* override methods                                            */\n    /* =========================================================== */\n\n    /**\n     * Inserts managed object oObject to the aggregation named sAggregationName at position iIndex.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param oObject {sap.ui.base.ManagedObject} the ManagedObject to add; if empty, nothing is inserted.\n     * @param iIndex {int} the 0-based index the managed object should be inserted at; for a negative value iIndex, oObject is inserted at position 0; for a value greater than the current size of the aggregation, oObject is inserted at the last position\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    insertAggregation(sAggregationName, oObject, iIndex, bSuppressInvalidate) {\n      if (sAggregationName === 'data') {\n        // important: update value, before fire event\n        Control.prototype.insertAggregation.call(this, sAggregationName, oObject, true);\n\n        // forward dataUpdate event\n        oObject.attachDataPointUpdate(() => {\n          this.fireSeriesDataUpdate({\n            code: library.ChartUpdateCode.DataPoint\n          });\n        });\n\n        // inform observers about data update\n        this.fireSeriesDataUpdate({\n          code: library.ChartUpdateCode.DataPoint\n        });\n      } else {\n        Control.prototype.insertAggregation.call(this, sAggregationName, oObject, iIndex, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Adds some entity oObject to the aggregation identified by sAggregationName.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param oObject {sap.ui.base.ManagedObject} the ManagedObject to add; if empty, nothing is inserted.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    addAggregation(sAggregationName, oObject, bSuppressInvalidate) {\n      if (sAggregationName === 'data') {\n        // important: update value, before fire event\n        Control.prototype.addAggregation.call(this, sAggregationName, oObject, true);\n\n        // forward dataUpdate event\n        oObject.attachDataPointUpdate(() => {\n          this.fireSeriesDataUpdate({\n            code: library.ChartUpdateCode.DataPoint\n          });\n        });\n\n        // inform observers about data update\n        this.fireSeriesDataUpdate({\n          code: library.ChartUpdateCode.DataPoint\n        });\n      } else {\n        Control.prototype.addAggregation.call(this, sAggregationName, oObject, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes an object from the aggregation named sAggregationName with cardinality 0..n.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param oObject {sap.ui.base.ManagedObject} the ManagedObject to add; if empty, nothing is inserted.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    removeAggregation(sAggregationName, oObject, bSuppressInvalidate) {\n      if (sAggregationName === 'data') {\n        // important: update value, before fire event\n        Control.prototype.removeAggregation.call(this, sAggregationName, oObject, true);\n\n        // forward dataUpdate event\n        oObject.attachDataPointUpdate(() => {\n          this.fireSeriesDataUpdate({\n            code: library.ChartUpdateCode.DataPoint\n          });\n        });\n\n        // inform observers about data update\n        this.fireSeriesDataUpdate({\n          code: library.ChartUpdateCode.DataPoint\n        });\n      } else {\n        Control.prototype.removeAggregation.call(this, sAggregationName, oObject, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes all objects from the 0..n-aggregation named sAggregationName.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    removeAllAggregation(sAggregationName, bSuppressInvalidate) {\n      if (sAggregationName === 'data') {\n        // important: update value, before fire event\n        Control.prototype.removeAllAggregation.call(this, sAggregationName, true);\n\n        // inform observers about data update\n        this.fireSeriesDataUpdate({\n          code: library.ChartUpdateCode.DataPoint\n        });\n      } else {\n        Control.prototype.removeAllAggregation.call(this, sAggregationName, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Destroys (all) the managed object(s) in the aggregation named sAggregationName and empties the aggregation. If the aggregation did contain any object, this ManagedObject is marked as changed.\n     *\n     * @param sAggregationName {string} the string identifying the aggregation the managed object oObject should be inserted into.\n     * @param bSuppressInvalidate {boolean} if true, this ManagedObject as well as the added child are not marked as changed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    destroyAggregation(sAggregationName, bSuppressInvalidate) {\n      if (sAggregationName === 'data') {\n        // important: update value, before fire event\n        Control.prototype.destroyAggregation.call(this, sAggregationName, true);\n\n        // inform observers about data update\n        this.fireSeriesDataUpdate({\n          code: library.ChartUpdateCode.DataPoint\n        });\n      } else {\n        Control.prototype.destroyAggregation.call(this, sAggregationName, bSuppressInvalidate);\n      }\n\n      return this;\n    },\n\n    /**\n     * Overwrites the method in order to check on supported properties.\n     *\n     * @param sName {string} Property name to be set\n     * @param vValue {boolean | string | object} Property value to be set\n     * @param bSuppressInvalidation {boolean} Whether invalidation to be suppressed\n     * @return {ui5.viz.ChartSeries} This instance for chaining\n     * @public\n     */\n    setProperty(sName, vValue, bSuppressInvalidation) {\n      if (['type', 'name', 'color', 'showLabels', 'groupKey', 'visible', 'yAxis', 'lineStyle', 'shapeStyle', 'lineAnimationSpeed', 'lineAnimationForwards'].includes(sName)) {\n        // important: update value, before fire event\n        Control.prototype.setProperty.call(this, sName, vValue, true); // do not rerender\n\n        // inform observers about data update\n        this.fireSeriesDataUpdate();\n      } else if (sName === 'visible') {\n        // important: update value, before fire event\n        Control.prototype.setProperty.call(this, sName, vValue, true); // do not rerender\n\n        // inform observers about show/hide series\n        this.fireSeriesVisibilityChange({\n          chartSeries: this\n        });\n      } else {\n        Control.prototype.setProperty.call(this, sName, vValue, bSuppressInvalidation);\n      }\n\n      return this;\n    }\n\n    /* =========================================================== */\n    /* public methods                                              */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* private methods                                             */\n    /* =========================================================== */\n  });\n},\n/* bExport= */true);",
		"ui5/libs/viz/Color.js": "/* @flow */\n\n/**\n * UI development toolkit enhancement for HTML5 (OpenUI5)\n * (c) Copyright 2016 PulseShift GmbH, all rights reserved.\n * Created by Jascha Quintern (fuchsvomwalde) on 28. Jul 2016.\n */\nsap.ui.define(['sap/ui/core/Control', './library'], function (Control) {\n  /**\n   * Constructor for a new <code>ui5.viz.Color</code>.\n   *\n   * @param {string} [sId] Id for the new control, generated automatically if no id is given\n   * @param {object} [mSettings] Initial settings for the new control\n   *\n   * @class\n   * The <code>Color</code> control: Color container for bar, line and other chart types. Based on C3.js..\n   *\n   * @extends sap.ui.core.Control\n   *\n   * @author PulseShift GmbH\n   * @version 1.0.0\n   * @since: 1.0.0\n   *\n   * @constructor\n   * @public\n   * @alias ui5.viz.Color\n   */\n  return Control.extend('ui5.viz.Color', {\n    /* =========================================================== */\n    /* meta data definition                                        */\n    /* =========================================================== */\n\n    metadata: {\n      library: 'ui5.viz',\n      properties: {\n        /* === Appereance === */\n\n        /**\n         * Sets the CSS value for the color\n         * @since: 1.0.0\n         */\n        color: {\n          type: 'sap.ui.core.CSSColor',\n          group: 'Appereance',\n          defaultValue: null\n        }\n      },\n      aggregations: {},\n      associations: {},\n      events: {}\n    },\n\n    /* =========================================================== */\n    /* private attributes                                          */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* constants                                                   */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* lifecycle methods                                           */\n    /* =========================================================== */\n\n    /**\n     * The init() method can be used to set up, for example, internal variables or subcontrols of a composite control.\n     * If the init() method is implemented, SAPUI5 invokes the method for each control instance directly after the constructor method.\n     * @private\n     * @override\n     */\n    init() {},\n\n    /**\n     * Constructor for a new <code>ui5.viz.Chart</code>.\n     *\n     * @param {string} [sId] Id for the new control, generated automatically if no id is given\n     * @param {object} [mSettings] Initial settings for the new control\n     */\n    constructor() {\n      Control.prototype.constructor.apply(this, arguments);\n    }\n\n    /**\n     * Method called before control gets rendered\n     * @private\n     * @override\n     */\n    // onBeforeRendering() {},\n\n    /**\n     * Renderer function of control <code>ui5.viz.Chart</code>.\n     *\n     * @param {object} [oRm] Render Manager\n     * @param {object} [oControl] Current control (this)\n     */\n    // renderer(oRm, oControl) {},\n\n    /**\n     * Method called after control gets rendered\n     * @private\n     * @override\n     */\n    // onAfterRendering() {},\n\n    /**\n     * The exit() method is used to clean up resources and to deregister event handlers.\n     * If the exit() method is implemented, SAPUI5 core invokes the method for each control instance when it is destroyed.\n     * @private\n     * @override\n     */\n    // exit() {},\n\n    /* =========================================================== */\n    /* override methods                                            */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* public methods                                              */\n    /* =========================================================== */\n\n    /* =========================================================== */\n    /* private methods                                             */\n    /* =========================================================== */\n  });\n},\n/* bExport= */true);",
		"ui5/libs/viz/library.js": "/* @flow */\n\n/**\n * UI development toolkit for HTML5 (OpenUI5)\n * (c) Copyright 2016 PulseShift GmbH, all rights reserved.\n * Created by Jascha Quintern on 12.07.2016.\n */\n\n/**\n * Initialization Code and shared classes of library ui5.viz.\n */\nsap.ui.define([\n// library dependency\n'sap/ui/thirdparty/d3', 'vendor/c3'], function () {\n  /**\n   * PulseShift OpenUI5 library with visualization functionalities.\n   *\n   * @namespace\n   * @name ui5.viz\n   * @author PulseShift GmbH\n   * @version 1.0.0\n   * @public\n   */\n  sap.ui.getCore().initLibrary({\n    name: 'ui5.viz',\n    version: '1.0.0',\n    dependencies: [],\n    types: [\n    // builtin types\n    'any', 'boolean', 'float', 'int', 'object', 'string', 'void',\n\n    // public simple types and enums\n    'ui5.viz.ChartLegendPosition', 'ui5.viz.ChartTitlePosition', 'ui5.viz.ChartSeriesType', 'ui5.viz.LineStyle', 'ui5.viz.ShapeStyle', 'ui5.viz.AnimationSpeed', 'ui5.viz.AxisType', 'ui5.viz.DataPointAnimation', 'ui5.viz.ColorPalette'],\n    interfaces: [],\n    controls: ['ui5.viz.Chart', 'ui5.viz.ChartSeries', 'ui5.viz.ChartDataPoint', 'ui5.viz.ChartLine', 'ui5.viz.ChartArea', 'ui5.viz.ChartAxis', 'ui5.viz.ChartAxisLabel', 'ui5.viz.Color'],\n    elements: []\n  });\n\n  /**\n   * Available chart legend positions.\n   *\n   * @enum {string}\n   * @public\n   */\n  ui5.viz.ChartLegendPosition = {\n    Right: 'right',\n    Bottom: 'bottom'\n\n    /**\n     * Available chart title positions.\n     *\n     * @enum {string}\n     * @public\n     */\n  };ui5.viz.ChartTitlePosition = {\n    Start: 'start',\n    Middle: 'middle',\n    End: 'end'\n\n    /**\n     * Available chart series types.\n     *\n     * @enum {string}\n     * @public\n     */\n  };ui5.viz.ChartSeriesType = {\n    Spline: 'spline',\n    Line: 'line',\n    Bar: 'bar',\n    Step: 'step',\n    AreaLine: 'area',\n    AreaSpline: 'area-spline',\n    AreaStep: 'area-step'\n\n    /**\n     * Available lines styles.\n     *\n     * @enum {string}\n     * @public\n     */\n  };ui5.viz.LineStyle = {\n    Default: 'default',\n    Dashed: 'dashed',\n    Dotted: 'dotted'\n\n    /**\n     * Available shape styles.\n     *\n     * @enum {string}\n     * @public\n     */\n  };ui5.viz.ShapeStyle = {\n    Default: 'default',\n    Striped: 'striped'\n\n    /**\n     * Available animation speeds for dashed line animations.\n     *\n     * @enum {string}\n     * @public\n     */\n  };ui5.viz.AnimationSpeed = {\n    None: 'none',\n    Slow: 'slow',\n    Medium: 'medium',\n    Fast: 'faste'\n\n    /**\n     * Available axis.\n     *\n     * @enum {string}\n     * @public\n     */\n  };ui5.viz.Axis = {\n    Y: 'y',\n    Y2: 'y2',\n    X: 'x',\n    Z: 'z'\n\n    /**\n     * Available axis types.\n     *\n     * @enum {string}\n     * @public\n     */\n  };ui5.viz.AxisType = {\n    Default: 'Default',\n    Time: 'Time'\n\n    /**\n     * Available animation types to highlight data points.\n     *\n     * @enum {string}\n     * @public\n     */\n  };ui5.viz.DataPointAnimation = {\n    None: 'None',\n    Pulsate: 'Pulsate'\n\n    /**\n     * Available color palettes.\n     *\n     * @enum {array}\n     * @public\n     */\n  };ui5.viz.ColorPalette = {\n    // custom color palette (if set, this will be retrieved as new default)\n    custom: null,\n\n    // set of unordered material design colors (shape 500)\n    Material500: ['#2196F3', // blue\n    '#4CAF50', // green\n    '#FF9800', // orange\n    '#E91E63', // pink\n    '#00BCD4', // cyan\n    '#FFEB3B', // yellow\n    '#673AB7', // deep purple\n    '#009688', // teal\n    '#FFC107', // amber\n    '#03A9F4', // light blue\n    '#CDDC39', // lime\n    '#9C27B0', // purple\n    '#D32F2F', // red\n    '#3F51B5', // indigo\n    '#8BC34A', // light green\n    '#FF5722' // deep orange\n    ],\n\n    // set of ordered material design colors (shape 500)\n    Material500S: ['#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722', '#D32F2F', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5'],\n\n    // set of unordered material design colors (shape 300)\n    Material300: ['#64B5F6', '#81C784', '#FFB74D', '#F06292', '#4DD0E1', '#FFF176', '#9575CD', '#4DB6AC', '#FFD54F', '#4FC3F7', '#DCE775', '#BA68C8', '#E57373', '#7986CB', '#AED581', '#FF8A65'],\n\n    // set of ordered material design colors (shape 300)\n    Material300S: ['#64B5F6', '#4FC3F7', '#4DD0E1', '#4DB6AC', '#81C784', '#AED581', '#DCE775', '#FFF176', '#FFD54F', '#FFB74D', '#FF8A65', '#E57373', '#F06292', '#BA68C8', '#9575CD', '#7986CB']\n\n    /**\n     * Define default color palette.\n     *\n     * @function\n     * @param {Array[String]} [aColorPalette] Ordered list with plain CSS colors.\n     * @protected\n     */\n  };ui5.viz.setDefaultColorPalette = function (aColorPalette) {\n    ui5.viz.ColorPalette.custom = Array.isArray(aColorPalette) ? aColorPalette : null;\n  };\n\n  /**\n   * Parse CSS size.\n   *\n   * @function\n   * @param {string} sCSSSize\n   * @return { value: {string}, unit: {string} }\n   * @protected\n   */\n  ui5.viz.parseCSSSize = function (sCSSSize) {\n    var aUnitMatches = sCSSSize.match(/^([+-]?(?:\\d+|\\d*\\.\\d+))([a-z]*|%)$/i) || [];\n    return {\n      value: parseFloat(sCSSSize, 10),\n      unit: aUnitMatches[2] ? aUnitMatches[2].toLowerCase() : 'px'\n    };\n  };\n\n  /**\n   * Available chart update event codes.\n   *\n   * @enum {string}\n   * @protected\n   */\n  ui5.viz.ChartUpdateCode = {\n    DataPoint: 'DataPoint',\n    Line: 'Line',\n    Area: 'Area'\n\n    /* =========================================================== */\n    /* c3js library extension                                      */\n    /* =========================================================== */\n\n    // // add toggle function to show/hide Y2 axis by API\n    // if (!c3.chart.fn.axis.showY2) {\n    //   // show/hide Y2 axis\n    //   c3.chart.fn.axis.showY2 = function(shown) {\n    //     let $$ = this.internal, config = $$.config\n    //     config.axis_y2_show = !!shown\n    //     $$.axes.y2.style(\n    //       'visibility',\n    //       config.axis_y2_show ? 'visible' : 'hidden'\n    //     )\n    //     $$.redraw()\n    //   }\n    // }\n\n    // // add toggle function to show/hide Y axis by API\n    // if (!c3.chart.fn.axis.showY) {\n    //   // show/hide Y axis\n    //   c3.chart.fn.axis.showY = function(shown) {\n    //     let $$ = this.internal, config = $$.config\n    //     config.axis_y_show = !!shown\n    //     $$.axes.y.style('visibility', config.axis_y_show ? 'visible' : 'hidden')\n    //     $$.redraw()\n    //   }\n    // }\n\n    // // add toggle function to show/hide X axis by API\n    // if (!c3.chart.fn.axis.showX) {\n    //   // show/hide X axis\n    //   c3.chart.fn.axis.showX = function(shown) {\n    //     let $$ = this.internal, config = $$.config\n    //     config.axis_x_show = !!shown\n    //     $$.axes.x.style('visibility', config.axis_x_show ? 'visible' : 'hidden')\n    //     $$.redraw()\n    //   }\n    // }\n\n    /* =========================================================== */\n    /* Polyfills                                                   */\n    /* =========================================================== */\n\n    /**\n     * Polyfill: [Array.prototype.includes()]\n     *\n     * This method has been added to the ECMAScript 6 specification and may not be available in all JavaScript implementations yet.\n     * However, this polyfill should enable the feature in IE.\n     */\n  };if (!Array.prototype.includes) {\n    Array.prototype.includes = function (searchElement /*, fromIndex*/) {\n      if (this == null) {\n        throw new TypeError('Array.prototype.includes called on null or undefined');\n      }\n\n      var O = Object(this);\n      var len = parseInt(O.length, 10) || 0;\n      if (len === 0) {\n        return false;\n      }\n      var n = parseInt(arguments[1], 10) || 0;\n      var k;\n      if (n >= 0) {\n        k = n;\n      } else {\n        k = len + n;\n        if (k < 0) {\n          k = 0;\n        }\n      }\n      var currentElement;\n      while (k < len) {\n        currentElement = O[k];\n        if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {\n          // NaN !== NaN\n          return true;\n        }\n        k++;\n      }\n      return false;\n    };\n  }\n\n  /**\n   * Polyfill: [Array.prototype.find()]\n   *\n   * This method has been added to the ECMAScript 6 specification and may not be available in all JavaScript implementations yet.\n   * However, this polyfill should enable the feature in IE.\n   */\n  if (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n      value: function (predicate) {\n        // 1. Let O be ? ToObject(this value).\n        if (this == null) {\n          throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var o = Object(this);\n\n        // 2. Let len be ? ToLength(? Get(O, \"length\")).\n        var len = o.length >>> 0;\n\n        // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n        if (typeof predicate !== 'function') {\n          throw new TypeError('predicate must be a function');\n        }\n\n        // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        var thisArg = arguments[1];\n\n        // 5. Let k be 0.\n        var k = 0;\n\n        // 6. Repeat, while k < len\n        while (k < len) {\n          // a. Let Pk be ! ToString(k).\n          // b. Let kValue be ? Get(O, Pk).\n          // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n          // d. If testResult is true, return kValue.\n          var kValue = o[k];\n          if (predicate.call(thisArg, kValue, k, o)) {\n            return kValue;\n          } // e. Increase k by 1.\n          k++;\n        } // 7. Return undefined.\n        return undefined;\n      }\n    });\n  }\n\n  return ui5.viz;\n});"
	}
});